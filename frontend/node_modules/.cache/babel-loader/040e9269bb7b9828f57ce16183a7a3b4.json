{"remainingRequest":"/Users/taylor/Documents/COMP90024/A2/COMP90024-2019S1-Team7-TrackerHub-master/frontend/node_modules/babel-loader/lib/index.js!/Users/taylor/Documents/COMP90024/A2/COMP90024-2019S1-Team7-TrackerHub-master/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/taylor/Documents/COMP90024/A2/COMP90024-2019S1-Team7-TrackerHub-master/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/taylor/Documents/COMP90024/A2/COMP90024-2019S1-Team7-TrackerHub-master/frontend/src/views/Map.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/taylor/Documents/COMP90024/A2/COMP90024-2019S1-Team7-TrackerHub-master/frontend/src/views/Map.vue","mtime":1561893340000},{"path":"/Users/taylor/Documents/COMP90024/A2/COMP90024-2019S1-Team7-TrackerHub-master/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/taylor/Documents/COMP90024/A2/COMP90024-2019S1-Team7-TrackerHub-master/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/taylor/Documents/COMP90024/A2/COMP90024-2019S1-Team7-TrackerHub-master/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/taylor/Documents/COMP90024/A2/COMP90024-2019S1-Team7-TrackerHub-master/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _parseInt from \"/Users/taylor/Documents/COMP90024/A2/COMP90024-2019S1-Team7-TrackerHub-master/frontend/node_modules/@babel/runtime-corejs2/core-js/parse-int\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _Object$keys from \"/Users/taylor/Documents/COMP90024/A2/COMP90024-2019S1-Team7-TrackerHub-master/frontend/node_modules/@babel/runtime-corejs2/core-js/object/keys\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport _slicedToArray from \"/Users/taylor/Documents/COMP90024/A2/COMP90024-2019S1-Team7-TrackerHub-master/frontend/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _Object$entries3 from \"/Users/taylor/Documents/COMP90024/A2/COMP90024-2019S1-Team7-TrackerHub-master/frontend/node_modules/@babel/runtime-corejs2/core-js/object/entries\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.regexp.to-string\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Barchart from './../components/Barchart';\nimport Linechart from './../components/Linechart';\nimport Piechart from './../components/Piechart';\nimport Radarchart from './../components/Radarchart';\nimport { mapStyle } from './../assets/js/map-style';\nimport { Const } from './../assets/js/const';\nimport InfoWindowComponent from './InfoWindow';\nimport Vue from 'vue';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Datetime } from 'vue-datetime';\nimport 'vue-datetime/dist/vue-datetime.css';\nimport Loading from 'vue-loading-overlay';\nimport 'vue-loading-overlay/dist/vue-loading.css';\nexport default {\n  name: 'gmap',\n  components: {\n    Radarchart: Radarchart,\n    Piechart: Piechart,\n    Linechart: Linechart,\n    Barchart: Barchart,\n    datetime: Datetime,\n    Loading: Loading\n  },\n  data: function data() {\n    return {\n      visible: false,\n      pieData: [4, 5, 6, 7],\n      barData: [],\n      barDataLabel: [],\n      radarData: [],\n      lineData: [],\n      machineDatacollection_lust: null,\n      machineDatacollection_gluttony: null,\n      textDatacollection: null,\n      sentimentDatacollection: null,\n      barDatacollection: null,\n      start_time: new Date().toString(),\n      end_time: new Date().toString(),\n      user_id: '',\n      number: 1,\n      skip: 0,\n      vic_geo: 'https://data.gov.au/geoserver/vic-local-government-areas-psma-administrative-boundaries/wfs?request=GetFeature&typeName=ckan_bdf92691_c6fe_42b9_a0e2_a4cd716fa811&outputFormat=json',\n      melb_geo: 'https://data.gov.au/geoserver/vic-local-government-areas-psma-administrative-boundaries/wfs?request=GetFeature&typeName=ckan_bdf92691_c6fe_42b9_a0e2_a4cd716fa811&outputFormat=json',\n      tags: null,\n      selections: [{\n        key: 'lust',\n        text: 'Lust',\n        value: 'lust'\n      }, {\n        key: 'gluttony',\n        text: 'Gluttony',\n        value: 'gluttony'\n      }, {\n        key: 'text',\n        text: 'Text',\n        value: 'text'\n      }, {\n        key: 'sentiment',\n        text: 'Sentiment',\n        value: 'sentiment'\n      }]\n    };\n  },\n  mounted: function mounted() {\n    this.mapInit();\n    this.chartBuildMachine();\n    this.chartBuildText();\n  },\n  methods: {\n    // ========================== Init Map ==================================================\n    mapInit: function mapInit() {\n      var map = new google.maps.Map(document.getElementById('map_canvas'), {\n        zoom: 13,\n        center: {\n          lat: -37.7998,\n          lng: 144.9460\n        },\n        disableDefaultUI: true,\n        styles: mapStyle\n      });\n      var infowindow = new google.maps.InfoWindow(); // ========================Icon examples=========================\n\n      var icon = {\n        path: Const.svg_lust,\n        fillColor: '#ff9900',\n        fillOpacity: 1,\n        anchor: new google.maps.Point(250, 250),\n        strokeWeight: 0,\n        scale: .1\n      };\n      var icon2 = {\n        path: Const.svg_gluttony,\n        fillColor: '#ff9900',\n        fillOpacity: 1,\n        anchor: new google.maps.Point(250, 250),\n        strokeWeight: 0,\n        scale: .1\n      };\n      var icon3 = {\n        path: Const.svg_neutral,\n        fillColor: '#ff9900',\n        fillOpacity: 1,\n        anchor: new google.maps.Point(250, 250),\n        strokeWeight: 0,\n        scale: .1\n      };\n      var icon4 = {\n        path: Const.svg_positive,\n        fillColor: '#ff9900',\n        fillOpacity: 1,\n        anchor: new google.maps.Point(250, 250),\n        strokeWeight: 0,\n        scale: .1\n      };\n      var icon5 = {\n        path: Const.svg_negative,\n        fillColor: '#ff9900',\n        fillOpacity: 1,\n        anchor: new google.maps.Point(250, 250),\n        strokeWeight: 0,\n        scale: .1\n      };\n      var myFoodMark = {\n        lat: -37.8036,\n        lng: 144.9631\n      };\n      var myLustMark = {\n        lat: -37.8136,\n        lng: 144.9631\n      };\n      var myNormalMark = {\n        lat: -37.8036,\n        lng: 144.9531\n      };\n      var myPositiveMark = {\n        lat: -37.8136,\n        lng: 144.9731\n      };\n      var myNegativeMark = {\n        lat: -37.8236,\n        lng: 144.9631\n      };\n      var foodMark = new google.maps.Marker({\n        position: myFoodMark,\n        map: map,\n        animation: google.maps.Animation.BOUNCE,\n        title: 'Hello Food!',\n        icon: icon2\n      });\n      var lustMark = new google.maps.Marker({\n        position: myLustMark,\n        map: map,\n        animation: google.maps.Animation.BOUNCE,\n        title: 'Hello Lust!',\n        icon: icon\n      });\n      var warthMark = new google.maps.Marker({\n        position: myNormalMark,\n        map: map,\n        animation: google.maps.Animation.BOUNCE,\n        title: 'Hello Normal!',\n        icon: icon3\n      });\n      var positiveMark = new google.maps.Marker({\n        position: myPositiveMark,\n        map: map,\n        animation: google.maps.Animation.BOUNCE,\n        title: 'Hello Positive!',\n        icon: icon4\n      });\n      var negativeMark = new google.maps.Marker({\n        position: myNegativeMark,\n        map: map,\n        animation: google.maps.Animation.BOUNCE,\n        title: 'Hello Negative!',\n        icon: icon5\n      });\n      positiveMark.addListener('click', function () {\n        var content = '<div id=\"content\" style=\"min-width:150px;\">' + '<p>Tags</p>' + '<button class=\"btn btn-primary btn-dark\">positive</button>' + '<button class=\"btn btn-primary btn-warning\">positive</button>' + '<button class=\"btn btn-primary\">positive</button>' + '</div>';\n        infowindow.setContent(content);\n        infowindow.open(map, positiveMark);\n      });\n    },\n    // ========================== Show aurin data on map ====================================\n    mapAurin: function mapAurin(type) {\n      var _this = this;\n\n      this.visible = true;\n      var map = new google.maps.Map(document.getElementById('map_canvas'), {\n        zoom: 12,\n        center: {\n          lat: -37.7998,\n          lng: 144.9460\n        },\n        disableDefaultUI: true,\n        styles: mapStyle\n      });\n      google.maps.event.addListenerOnce(map, 'idle', function () {\n        _this.visible = false;\n      });\n      var colors = this.gradient('#ffffff', '#ff9900', 7);\n      map.data.loadGeoJson(this.vic_geo);\n      map.data.setStyle(function (feature) {\n        var name = feature.getProperty('vic_lga__3');\n        var total = 0;\n\n        if (Const.aurin[\"\".concat(name)]) {\n          if (Const.aurin[\"\".concat(name)][\"\".concat(type[0])][\"\".concat(type[1])]) {\n            total = Const.aurin[\"\".concat(name)][\"\".concat(type[0])][\"\".concat(type[1])];\n          }\n        }\n\n        var color = '#000000';\n        if (total > 1) color = colors[0];\n        if (total > 1000) color = colors[1];\n        if (total > 3000) color = colors[2];\n        if (total > 5000) color = colors[3];\n        if (total > 10000) color = colors[4];\n        if (total > 15000) color = colors[5];\n        if (total > 20000) color = colors[6];\n        return {\n          fillColor: color,\n          fillOpacity: 0.7,\n          strokeWeight: 1\n        };\n      });\n    },\n    // ========================== Build Map =================================================\n    mapBuild: function mapBuild(scope) {\n      var _this2 = this;\n\n      var map = new google.maps.Map(document.getElementById('map_canvas'), {\n        zoom: 12,\n        center: {\n          lat: -37.7998,\n          lng: 144.9460\n        },\n        disableDefaultUI: true,\n        styles: mapStyle\n      });\n      var infowindow = new google.maps.InfoWindow();\n      var marker, i;\n      var markers = [];\n      var locations = [];\n      var colors = this.gradient('#ffffff', '#ff9900', 7);\n      this.barDataLabel.length = 0;\n      this.barData.length = 0; // ======================== Setup each region/ Collect bar data ==========================\n      // set style for each region\n\n      map.data.loadGeoJson(this.melb_geo);\n\n      if (scope == 'melb') {\n        map.data.setStyle(function (feature) {\n          var total = feature.getProperty('total');\n          var name = feature.getProperty('name');\n\n          if (!_this2.barDataLabel.includes(name)) {\n            _this2.barDataLabel.push(name);\n\n            _this2.barData.push(total);\n          }\n\n          var color = '#000000';\n          if (total > 1) color = colors[0];\n          if (total > 100) color = colors[1];\n          if (total > 300) color = colors[2];\n          if (total > 500) color = colors[3];\n          if (total > 1000) color = colors[4];\n          if (total > 1500) color = colors[5];\n          if (total > 2000) color = colors[6];\n          return {\n            fillColor: color,\n            fillOpacity: 0.7,\n            strokeWeight: 1\n          };\n        });\n      } else {\n        map.data.setStyle(function (feature) {\n          var total = feature.getProperty('total');\n          var name = feature.getProperty('name');\n\n          if (!_this2.barDataLabel.includes(name)) {\n            _this2.barDataLabel.push(name);\n\n            _this2.barData.push(total);\n          }\n\n          var color = '#000000';\n          if (total > 1) color = colors[0];\n          if (total > 1000) color = colors[1];\n          if (total > 3000) color = colors[2];\n          if (total > 5000) color = colors[3];\n          if (total > 10000) color = colors[4];\n          if (total > 15000) color = colors[5];\n          if (total > 20000) color = colors[6];\n          return {\n            fillColor: color,\n            fillOpacity: 0.7,\n            strokeWeight: 1\n          };\n        });\n      } // setup bar data\n\n\n      this.barDatacollection = {\n        labels: this.barDataLabel,\n        datasets: [{\n          label: 'Total Sins',\n          backgroundColor: '#ff9900',\n          data: this.barData\n        }] // mouse click event: show grid info\n\n      };\n      map.data.addListener('click', function (event) {\n        // prepare data\n        var name = event.feature.getProperty(\"name\");\n        var statistics = event.feature.getProperty(\"statistcs\");\n        var infoPieDataSentiment = [];\n        var infoPieNameSentiment = [];\n        var infoPieData = [];\n        var infoPieName = [];\n        var temp = 'sentiment';\n\n        for (var _i = 0, _Object$entries = _Object$entries3(statistics.sentiment); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n              key = _Object$entries$_i[0],\n              value = _Object$entries$_i[1];\n\n          infoPieNameSentiment.push(key);\n          infoPieDataSentiment.push(value);\n        }\n\n        for (var _i2 = 0, _Object$entries2 = _Object$entries3(statistics); _i2 < _Object$entries2.length; _i2++) {\n          var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n              key = _Object$entries2$_i[0],\n              value = _Object$entries2$_i[1];\n\n          if (key != temp) {\n            for (var _i3 = 0, _Object$entries4 = _Object$entries3(value); _i3 < _Object$entries4.length; _i3++) {\n              var _Object$entries4$_i = _slicedToArray(_Object$entries4[_i3], 2),\n                  inner_key = _Object$entries4$_i[0],\n                  inner_value = _Object$entries4$_i[1];\n\n              infoPieName.push(inner_key);\n              infoPieData.push(inner_value);\n            }\n          }\n        } // set all chart data here\n\n\n        var pieDatacollection_sentiment = {\n          labels: infoPieNameSentiment,\n          datasets: [{\n            label: 'Sentiment',\n            backgroundColor: _this2.gradient('#F5F5F5', 'ff9900', infoPieDataSentiment.length),\n            data: infoPieDataSentiment\n          }]\n        };\n        var pieDatacollection = {\n          labels: infoPieName,\n          datasets: [{\n            label: 'Sin',\n            backgroundColor: _this2.gradient('#F5F5F5', 'ff9900', infoPieData.length),\n            data: infoPieData\n          }] // init infowindow with customized view\n\n        };\n        var InfoWindow = Vue.extend(InfoWindowComponent); // send data to the view\n\n        var instance = new InfoWindow({\n          propsData: {\n            name: name,\n            pieDatacollection_sentiment: pieDatacollection_sentiment,\n            pieDatacollection: pieDatacollection\n          }\n        });\n        instance.$mount();\n        infowindow.setContent(instance.$el); //infowindow.setPosition(event.feature.getGeometry().getAt(0).getAt(0).getAt(0))\n\n        infowindow.setPosition(event.latLng); //infowindow.setOptions({pixelOffset: new google.maps.Size(0,0)})\n\n        infowindow.open(map);\n      }); // mouse over event: highlight color\n\n      map.data.addListener('mouseover', function (event) {\n        map.data.overrideStyle(event.feature, {\n          fillColor: 'black'\n        });\n      }); // mouse our event: reset color/info-window\n\n      map.data.addListener('mouseout', function (event) {\n        map.data.revertStyle();\n        infowindow.close();\n      });\n    },\n    // ====================== Get Map Data ==================================================\n    mapBuildZone: function mapBuildZone(zone, scope) {\n      var _this3 = this;\n\n      this.visible = true;\n      this.$ajax({\n        url: zone,\n        method: 'GET'\n      }).then(function (res) {\n        _this3.melb_geo = res.data.url, _this3.visible = false, console.log(_this3.melb_geo), // re-render the map here\n        _this3.flash('success', 'success', {\n          timeout: 3000\n        }), _this3.mapBuild(scope);\n      }).catch(function (error) {\n        _this3.visible = false, _this3.flash(\"\".concat(error), 'error'), _this3.errored = true;\n      });\n    },\n    // ====================== Get Machine Learning Data =====================================\n    chartBuildMachine: function chartBuildMachine() {\n      var _this4 = this;\n\n      this.visilbe = true;\n      this.$ajax({\n        url: '/api/statistics/machine/',\n        method: 'GET'\n      }).then(function (res) {\n        _this4.machineDatacollection_lust = {\n          labels: res.data.lust.key,\n          datasets: [{\n            label: 'Lust',\n            backgroundColor: _this4.gradient('#ff9900', '#ffffff', res.data.lust.key.length),\n            data: res.data.lust.value\n          }]\n        };\n        _this4.machineDatacollection_gluttony = {\n          labels: res.data.gluttony.key,\n          datasets: [{\n            label: 'Gluttony',\n            backgroundColor: _this4.gradient('#ff9900', '#ffffff', res.data.gluttony.key.length),\n            data: res.data.gluttony.value\n          }]\n        };\n        _this4.visible = false;\n      }).catch(function (error) {\n        _this4.visible = false, _this4.flash(\"\".concat(error), 'error'), _this4.errored = true;\n      });\n    },\n    // ====================== Get NLP Learning Data =========================================\n    chartBuildText: function chartBuildText() {\n      var _this5 = this;\n\n      this.visilbe = true;\n      this.$ajax({\n        url: '/api/statistics/text/',\n        method: 'GET'\n      }).then(function (res) {\n        console.log(res);\n        _this5.textDatacollection = {\n          labels: res.data.text.key,\n          datasets: [{\n            label: 'Text',\n            backgroundColor: _this5.gradient('#ff9900', '#ffffff', res.data.text.key.length),\n            data: res.data.text.value\n          }]\n        };\n        _this5.sentimentDatacollection = {\n          labels: res.data.sentiment.key,\n          datasets: [{\n            label: 'Sentiment',\n            backgroundColor: _this5.gradient('#F5F5F5', 'ff9900', res.data.sentiment.key.length),\n            data: res.data.sentiment.value\n          }]\n        };\n        _this5.visible = false;\n      }).catch(function (error) {\n        _this5.visible = false, _this5.flash(\"\".concat(error), 'error'), _this5.errored = true;\n      });\n    },\n    // ====================== Track 1 User by ID ============================================\n    mapBuildTrack: function mapBuildTrack() {\n      var _this6 = this;\n\n      this.visible = true;\n      var map = new google.maps.Map(document.getElementById('map_canvas'), {\n        zoom: 13,\n        center: {\n          lat: -37.7998,\n          lng: 144.9460\n        },\n        disableDefaultUI: true,\n        styles: mapStyle\n      });\n      var infowindow = new google.maps.InfoWindow();\n      var path = [];\n      var sDate = new Date(this.start_time);\n      var eDate = new Date(this.end_time);\n      var start_time = this.toISOLocal(sDate).replace(/T/g, \" \"),\n          end_time = this.toISOLocal(eDate).replace(/T/g, \" \");\n      var noData = false;\n      if (start_time.includes('NaN') || end_time.includes('NaN')) start_time = end_time = null;\n      var data = {\n        //start_time: '2016-01-09 10:00:00+1000',\n        //end_time: '2016-10-09 10:00:00+1000',\n        start_time: start_time,\n        end_time: end_time,\n        tags: this.tags,\n        threshold: 0.9\n      };\n      console.log(data);\n      this.$ajax({\n        url: \"/api/statistics/track/\".concat(this.user_id, \"/\"),\n        method: 'POST',\n        data: data\n      }).then(function (res) {\n        console.log(res.data);\n        if (_Object$keys(res.data).length === 0) _this6.flash('no data match current query', 'error');\n        noData = true;\n\n        var _loop = function _loop() {\n          var _Object$entries5$_i = _slicedToArray(_Object$entries5[_i4], 2),\n              key = _Object$entries5$_i[0],\n              value = _Object$entries5$_i[1];\n\n          var point = {\n            lat: value[0].geo[1],\n            lng: value[0].geo[0]\n          };\n          path.push(point);\n          var svg_icon = Const.svg_neutral;\n\n          if (value[0].tags.sentiment) {\n            if (value[0].tags.sentiment[0] == 'positive') {\n              svg_icon = Const.svg_positive;\n            }\n\n            if (value[0].tags.sentiment[0] == 'negative') {\n              svg_icon = Const.svg_negative;\n            }\n          }\n\n          var icon = {\n            path: svg_icon,\n            fillColor: '#ff9900',\n            fillOpacity: 1,\n            anchor: new google.maps.Point(250, 250),\n            strokeWeight: 0,\n            scale: .1\n          };\n          var marker = new google.maps.Marker({\n            position: point,\n            map: map,\n            icon: icon,\n            title: value[0].time + value[0].text\n          });\n          var tag_content = '';\n\n          for (var _i5 = 0, _Object$entries6 = _Object$entries3(value[0].tags); _i5 < _Object$entries6.length; _i5++) {\n            var _Object$entries6$_i = _slicedToArray(_Object$entries6[_i5], 2),\n                mainTag = _Object$entries6$_i[0],\n                subTags = _Object$entries6$_i[1];\n\n            subTags.forEach(function (tag) {\n              tag_content = tag_content + \"<button class=\\\"btn btn-primary btn-dark\\\">\".concat(tag, \"</button>\");\n            });\n          }\n\n          if (value[0].img_id.length > 0) {\n            value[0].img_id.forEach(function (img) {\n              tag_content = tag_content + \"<a class=\\\"btn btn-warning\\\" target=\\\"_blank\\\" href=\\\"http://172.26.37.225/api/tweet/pic/\".concat(img, \"\\\">IMAGE</a>\");\n            });\n          }\n\n          var content = '<div id=\"content\" style=\"min-width:150px;\">' + '<h4 class=\"font-weight-bold\">' + key + '</h4>' + tag_content + '</div>';\n          marker.addListener('click', function () {\n            infowindow.setContent(content);\n            infowindow.open(map, marker);\n          });\n          value.slice(1).forEach(function (track) {\n            svg_icon = Const.svg_neutral;\n\n            if (track.tags.sentiment) {\n              if (track.tags.sentiment[0] == 'positive') {\n                svg_icon = Const.svg_positive;\n              }\n\n              if (track.tags.sentiment[0] == 'negative') {\n                svg_icon = Const.svg_negative;\n              }\n            }\n\n            var icon_sm = {\n              path: svg_icon,\n              fillColor: '#ff9900',\n              fillOpacity: 1,\n              anchor: new google.maps.Point(250, 250),\n              strokeWeight: 0,\n              scale: .05\n            };\n            point = {\n              lat: track.geo[1],\n              lng: track.geo[0]\n            };\n            var marker = new google.maps.Marker({\n              position: point,\n              map: map,\n              icon: icon_sm,\n              title: track.time + track.text\n            });\n            tag_content = '';\n\n            for (var _i6 = 0, _Object$entries7 = _Object$entries3(track.tags); _i6 < _Object$entries7.length; _i6++) {\n              var _Object$entries7$_i = _slicedToArray(_Object$entries7[_i6], 2),\n                  mainTag = _Object$entries7$_i[0],\n                  subTags = _Object$entries7$_i[1];\n\n              subTags.forEach(function (tag) {\n                tag_content = tag_content + \"<button class=\\\"btn btn-primary btn-dark\\\">\".concat(tag, \"</button>\");\n              });\n            }\n\n            if (track.img_id.length > 0) {\n              track.img_id.forEach(function (img) {\n                tag_content = tag_content + \"<a class=\\\"btn btn-warning\\\" target=\\\"_blank\\\" href=\\\"http://172.26.37.225/api/tweet/pic/\".concat(img, \"\\\">IMAGE</a>\");\n              });\n            }\n\n            var content = '<div id=\"content\" style=\"min-width:150px;\">' + '<p class=\"font-weight-bold\">Tags</p>' + tag_content + '</div>';\n            marker.addListener('click', function () {\n              infowindow.setContent(content);\n              infowindow.open(map, marker);\n            });\n            path.push(point);\n          });\n        };\n\n        for (var _i4 = 0, _Object$entries5 = _Object$entries3(res.data); _i4 < _Object$entries5.length; _i4++) {\n          _loop();\n        }\n      }).then(function () {\n        var trackPath = new google.maps.Polyline({\n          path: path,\n          geodesic: true,\n          strokeColor: '#ff9900',\n          strokeOpacity: 1.0,\n          strokeWeight: 2\n        });\n        google.maps.event.addListener(trackPath, 'mouseover', function () {\n          trackPath.setOptions({\n            strokeWeight: 4\n          });\n        });\n        google.maps.event.addListener(trackPath, 'mouseout', function () {\n          trackPath.setOptions({\n            strokeWeight: 2\n          });\n        });\n        trackPath.setMap(map);\n        if (noData == false) _this6.flash('tracking success', 'success', {\n          timeout: 3000\n        });\n\n        _this6.flash('tracking success', 'success', {\n          timeout: 3000\n        });\n\n        _this6.visible = false;\n      }).catch(function (error) {\n        _this6.flash(\"\".concat(error), 'error'), _this6.visible = false;\n        _this6.errored = true;\n      });\n    },\n    // ====================== Track random n users ==========================================\n    mapBuildTrackN: function mapBuildTrackN() {\n      var _this7 = this;\n\n      this.visible = true;\n      var map = new google.maps.Map(document.getElementById('map_canvas'), {\n        zoom: 13,\n        center: {\n          lat: -37.7998,\n          lng: 144.9460\n        },\n        disableDefaultUI: true,\n        styles: mapStyle\n      });\n      var infowindow = new google.maps.InfoWindow();\n      var paths = [];\n      var colors = [];\n      var sDate = new Date(this.start_time);\n      var eDate = new Date(this.end_time);\n      var noData = false;\n      var start_time = this.toISOLocal(sDate).replace(/T/g, \" \"),\n          end_time = this.toISOLocal(eDate).replace(/T/g, \" \");\n      if (start_time.includes('NaN') || end_time.includes('NaN')) start_time = end_time = null;\n      var data = {\n        //start_time: '2016-01-09 10:00:00+1000',\n        //end_time: '2016-10-09 10:00:00+1000',\n        start_time: start_time,\n        end_time: end_time,\n        tags: this.tags,\n        skip: _parseInt(this.skip),\n        threshold: 0.9,\n        single: 20\n      };\n      console.log(data);\n      this.$ajax({\n        url: \"/api/statistics/track/random/\".concat(this.number, \"/\"),\n        method: 'POST',\n        data: data\n      }).then(function (res) {\n        if (_Object$keys(res.data).length === 0) _this7.flash('no data match current query', 'error');\n        noData = true;\n        console.log(res.data);\n\n        var _loop2 = function _loop2() {\n          var _Object$entries8$_i = _slicedToArray(_Object$entries8[_i7], 2),\n              key = _Object$entries8$_i[0],\n              value = _Object$entries8$_i[1];\n\n          var point = {\n            lat: value[0].geo[1],\n            lng: value[0].geo[0]\n          };\n\n          var color = _this7.getRandomColor();\n\n          var path = [];\n          path.push(point);\n          colors.push(color);\n          var svg_icon = Const.svg_neutral;\n\n          if (value[0].tags.sentiment) {\n            if (value[0].tags.sentiment[0] == 'positive') {\n              svg_icon = Const.svg_positive;\n            }\n\n            if (value[0].tags.sentiment[0] == 'negative') {\n              svg_icon = Const.svg_negative;\n            }\n          }\n\n          var icon = {\n            path: svg_icon,\n            fillColor: color,\n            fillOpacity: 1,\n            anchor: new google.maps.Point(250, 250),\n            strokeWeight: 0,\n            scale: .1\n          };\n          var marker = new google.maps.Marker({\n            position: point,\n            map: map,\n            icon: icon,\n            title: value[0].time\n          });\n          var tag_content = '';\n\n          for (var _i8 = 0, _Object$entries9 = _Object$entries3(value[0].tags); _i8 < _Object$entries9.length; _i8++) {\n            var _Object$entries9$_i = _slicedToArray(_Object$entries9[_i8], 2),\n                mainTag = _Object$entries9$_i[0],\n                subTags = _Object$entries9$_i[1];\n\n            subTags.forEach(function (tag) {\n              tag_content = tag_content + \"<button class=\\\"btn btn-primary btn-dark\\\">\".concat(tag, \"</button>\");\n            });\n          }\n\n          if (value[0].img_id.length > 0) {\n            value[0].img_id.forEach(function (img) {\n              tag_content = tag_content + \"<a class=\\\"btn btn-warning\\\" target=\\\"_blank\\\" href=\\\"http://172.26.37.225/api/tweet/pic/\".concat(img, \"\\\">IMAGE</a>\");\n            });\n          }\n\n          var content = '<div id=\"content\" style=\"min-width:150px;\">' + '<h4 class=\"font-weight-bold\">' + key + '</h4>' + tag_content + '</div>';\n          marker.addListener('click', function () {\n            infowindow.setContent(content);\n            infowindow.open(map, marker);\n          });\n          value.slice(1).forEach(function (track) {\n            svg_icon = Const.svg_neutral;\n\n            if (track.tags.sentiment) {\n              if (track.tags.sentiment[0] == 'positive') {\n                svg_icon = Const.svg_positive;\n              }\n\n              if (track.tags.sentiment[0] == 'negative') {\n                svg_icon = Const.svg_negative;\n              }\n            }\n\n            var icon_sm = {\n              path: svg_icon,\n              fillColor: color,\n              fillOpacity: 1,\n              anchor: new google.maps.Point(250, 250),\n              strokeWeight: 0,\n              scale: .05\n            };\n            point = {\n              lat: track.geo[1],\n              lng: track.geo[0]\n            };\n            var marker = new google.maps.Marker({\n              position: point,\n              map: map,\n              icon: icon_sm,\n              title: track.time\n            });\n            var tag_content = '';\n\n            for (var _i9 = 0, _Object$entries10 = _Object$entries3(track.tags); _i9 < _Object$entries10.length; _i9++) {\n              var _Object$entries10$_i = _slicedToArray(_Object$entries10[_i9], 2),\n                  mainTag = _Object$entries10$_i[0],\n                  subTags = _Object$entries10$_i[1];\n\n              subTags.forEach(function (tag) {\n                tag_content = tag_content + \"<button class=\\\"btn btn-primary btn-dark\\\">\".concat(tag, \"</button>\");\n              });\n            }\n\n            if (track.img_id.length > 0) {\n              track.img_id.forEach(function (img) {\n                tag_content = tag_content + \"<a class=\\\"btn btn-warning\\\" target=\\\"_blank\\\" href=\\\"http://172.26.37.225/api/tweet/pic/\".concat(img, \"\\\">IMAGE</a>\");\n              });\n            }\n\n            var content = '<div id=\"content\" style=\"min-width:150px;\">' + '<p class=\"font-weight-bold\">Tags</p>' + tag_content + '</div>';\n            marker.addListener('click', function () {\n              infowindow.setContent(content);\n              infowindow.open(map, marker);\n            });\n            path.push(point);\n          });\n          paths.push(path);\n        };\n\n        for (var _i7 = 0, _Object$entries8 = _Object$entries3(res.data); _i7 < _Object$entries8.length; _i7++) {\n          _loop2();\n        }\n      }).then(function () {\n        paths.forEach(function (path, j) {\n          var trackPath = new google.maps.Polyline({\n            path: path,\n            geodesic: true,\n            strokeColor: colors[j],\n            strokeOpacity: 1.0,\n            strokeWeight: 2\n          });\n          google.maps.event.addListener(trackPath, 'mouseover', function () {\n            trackPath.setOptions({\n              strokeWeight: 4\n            });\n          });\n          google.maps.event.addListener(trackPath, 'mouseout', function () {\n            trackPath.setOptions({\n              strokeWeight: 2\n            });\n          });\n          trackPath.setMap(map);\n        });\n        if (noData == false) _this7.flash(\"\".concat(paths.length, \" users found\"), 'success', {\n          timeout: 3000\n        });\n\n        _this7.flash(\"\".concat(paths.length, \" users found\"), 'success', {\n          timeout: 3000\n        });\n\n        _this7.visible = false;\n      }).catch(function (error) {\n        console.log(error);\n        _this7.flash(\"\".concat(error), 'error'), _this7.visible = false;\n        _this7.errored = true;\n      });\n    },\n    // ====================== Time formatter =================================================\n    toISOLocal: function toISOLocal(d) {\n      var z = function z(n) {\n        return (n < 10 ? '0' : '') + n;\n      };\n\n      var off = d.getTimezoneOffset();\n      var sign = off < 0 ? '+' : '-';\n      off = Math.abs(off);\n      return d.getFullYear() + '-' + z(d.getMonth() + 1) + '-' + z(d.getDate()) + 'T' + z(d.getHours()) + ':' + z(d.getMinutes()) + ':' + z(d.getSeconds()) + sign + z(off / 60 | 0) + z(off % 60);\n    },\n    // ====================== Color generators ===============================================\n    getRandomColor: function getRandomColor() {\n      var letters = '0123456789ABCDEF';\n      var color = '#';\n\n      for (var i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n      }\n\n      return color;\n    },\n    rgbToHex: function rgbToHex(r, g, b) {\n      var hex = (r << 16 | g << 8 | b).toString(16);\n      return \"#\" + new Array(Math.abs(hex.length - 7)).join(\"0\") + hex;\n    },\n    hexToRgb: function hexToRgb(hex) {\n      var rgb = [];\n\n      for (var i = 1; i < 7; i += 2) {\n        rgb.push(_parseInt(\"0x\" + hex.slice(i, i + 2)));\n      }\n\n      return rgb;\n    },\n    gradient: function gradient(startColor, endColor, step) {\n      var sColor = this.hexToRgb(startColor),\n          eColor = this.hexToRgb(endColor);\n      var rStep = (eColor[0] - sColor[0]) / step,\n          gStep = (eColor[1] - sColor[1]) / step,\n          bStep = (eColor[2] - sColor[2]) / step;\n      var gradientColorArr = [];\n\n      for (var i = 0; i < step; i++) {\n        gradientColorArr.push(this.rgbToHex(_parseInt(rStep * i + sColor[0]), _parseInt(gStep * i + sColor[1]), _parseInt(bStep * i + sColor[2])));\n      }\n\n      return gradientColorArr;\n    }\n  }\n};",{"version":3,"sources":["Map.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div id=\"gmap\">\n    <loading :active.sync=\"visible\" :can-cancel=\"true\"></loading>\n    <!-- Map -->\n    <div id=\"map_canvas\" style=\"height: 100vh; width: 100%\" ></div>\n    <!-- Div on top of the map -->\n    <div id=\"onmap\">\n      <div class=\"container mt-3\">\n         <h2>General Search</h2>\n        <div>     \n          <b-dropdown id=\"dropdown-1\" text=\"Aurin\" class=\"m-md-2\">\n            <b-dropdown-item @click=\"mapAurin(['econ','unemployment_num'])\">Unemployment</b-dropdown-item>\n            <b-dropdown-item @click=\"mapAurin(['econ','total_people_hospital'])\">Total Hospital Admission</b-dropdown-item>\n            <b-dropdown-item @click=\"mapAurin(['econ','total_male_hospital'])\">Male Hospital Admission</b-dropdown-item>\n            <b-dropdown-item @click=\"mapAurin(['econ','total_female_hospital'])\">Female Hospital Admission</b-dropdown-item>\n            <b-dropdown-divider></b-dropdown-divider>\n            <b-dropdown-item @click=\"mapAurin(['offence','weapons related'])\">Weapon Releted</b-dropdown-item>\n            <b-dropdown-item @click=\"mapAurin(['offence','assaults'])\">Assaults</b-dropdown-item>\n            <b-dropdown-item @click=\"mapAurin(['offence','sexual offences'])\">Sexual Offences</b-dropdown-item>\n            <b-dropdown-item @click=\"mapAurin(['offence','robbery'])\">Robbery</b-dropdown-item>\n            <b-dropdown-item @click=\"mapAurin(['offence','harassment and threatening'])\">Harassment and Threatening</b-dropdown-item>\n            <b-dropdown-item @click=\"mapAurin(['offence','total'])\">Total Offence</b-dropdown-item>\n          </b-dropdown>\n          <div class=\"divider\"/>\n          <button class=\"btn btn-dark\" \n            @click=\"mapBuildZone('/api/statistics/zone/','melb')\">Melbourne\n          </button>\n          <div class=\"divider\"/>\n          <button class=\"btn btn-dark\" \n            @click=\"mapBuildZone('/api/statistics/vic/zone/','vic')\">VIC\n          </button>\n\n        </div>\n      </div>\n      <p></p>\n      <div></div>\n    </div>  \n    <div id=\"onmap2\">    \n      <div class=\"container mt-3\">\n        <p></p>\n        <h2>User Track</h2>\n        <p>Track user by user ID:</p>\n        <input class=\"form-control\" v-model=\"user_id\" type=\"text\" placeholder=\"Search..\">\n        <div id=\"myDIV\" class=\"mt-3\">\n          <button class=\"btn btn-dark\" :disabled=\"tags == null || tags == '' || user_id == ''\" @click=\"mapBuildTrack()\">Track</button>\n        </div>\n      </div> \n        <div class=\"container mt-3\">\n        <p>Track random number of users:</p>\n        <input class=\"form-control\" v-model=\"number\" type=\"number\" placeholder=\"Search..\">\n        <br>\n        <p>Skip:</p>\n        <input class=\"form-control\" v-model=\"skip\" type=\"number\" placeholder=\"Skip..\">\n        <div id=\"myDIV2\" class=\"mt-3\">\n          <button class=\"btn btn-dark\" :disabled=\"tags == null || tags == ''\" @click=\"mapBuildTrackN()\">Track</button>\n        </div>\n        <p></p>\n        <div></div>\n      </div>     \n    </div>\n    \n    <!-- Charts -->\n    <a class=\"anchor\" id=\"anchor1\"></a>\n    <div id=\"chart\" class=\"container-fluid w-100 d-inline-block\" style=\"height: 100vh;z-index:0;\">\n      <div class=\"row\">\n        <div class=\"col-lg-12\"><Barchart :chartData=\"this.barDatacollection\" :height=\"700\" :width=\"2000\" /></div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-lg-3\"><Piechart :pieData=\"this.machineDatacollection_lust\"/></div>\n        <div class=\"col-lg-3\"><Piechart :pieData=\"this.machineDatacollection_gluttony\"/></div>\n        <div class=\"col-lg-3\"><Piechart :pieData=\"this.textDatacollection\"/></div>\n        <div class=\"col-lg-3\"><Piechart :pieData=\"this.sentimentDatacollection\"/></div>\n      </div> \n    </div>  \n\n    <!-- Tool Navbar -->\n    <nav class=\"navbar fixed-bottom navbar-light\">\n      <div class=\"row\" style=\"width: 100vw;\">\n        <div style=\"margin-left: 30px;\">\n          <span class=\"pull-left\">\n          <datetime v-model=\"start_time\" :type=\"'date'\" :title=\"'Select your start time'\"></datetime>\n          </span>\n        </div>\n        <div style=\"margin-left: 30px;\">\n          <a class=\"navbar-brand font-weight-bold text-white\">To</a>\n        </div>\n        <div style=\"margin-left: 15px;\">\n          <datetime v-model=\"end_time\" :type=\"'date'\" :title=\"'Select your end time'\"></datetime>\n        </div>\n        <div class=\"col-md-3\">\n          <sui-dropdown\n            fluid\n            multiple\n            :options=\"selections\"\n            placeholder=\"Sins\"\n            selection\n            v-model=\"tags\"\n          />\n        </div>\n\n        <div class=\"col-md-4\" style=\"height: 4vh; margin-bottom: 1vh;\">\n          <flash-message transitionIn=\"animated swing\"></flash-message>\n        </div>\n      </div>\n    </nav>\n\n  </div>\n</template>\n\n\n<script>\nimport Barchart from './../components/Barchart'\nimport Linechart from './../components/Linechart'\nimport Piechart from './../components/Piechart'\nimport Radarchart from './../components/Radarchart'\nimport {mapStyle} from './../assets/js/map-style'\nimport {Const} from './../assets/js/const'\nimport InfoWindowComponent from './InfoWindow'\nimport Vue from 'vue'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport {Datetime} from 'vue-datetime'\nimport 'vue-datetime/dist/vue-datetime.css'\nimport Loading from 'vue-loading-overlay'\nimport 'vue-loading-overlay/dist/vue-loading.css'\n\nexport default {\n  name: 'gmap',\n  components: {\n    Radarchart,\n    Piechart,\n    Linechart,\n    Barchart,\n    datetime: Datetime,\n    Loading\n  },\n\n  data() {\n    return {\n      visible: false,\n      pieData: [4,5,6,7],\n      barData: [],\n      barDataLabel: [],\n      radarData: [],\n      lineData: [],\n\n      machineDatacollection_lust: null,\n      machineDatacollection_gluttony: null,\n      textDatacollection:null,\n      sentimentDatacollection: null,\n      barDatacollection: null,\n\n      start_time: new Date().toString(),\n      end_time: new Date().toString(),\n      user_id: '',\n      number: 1,\n      skip: 0,\n      vic_geo: 'https://data.gov.au/geoserver/vic-local-government-areas-psma-administrative-boundaries/wfs?request=GetFeature&typeName=ckan_bdf92691_c6fe_42b9_a0e2_a4cd716fa811&outputFormat=json',\n      melb_geo: 'https://data.gov.au/geoserver/vic-local-government-areas-psma-administrative-boundaries/wfs?request=GetFeature&typeName=ckan_bdf92691_c6fe_42b9_a0e2_a4cd716fa811&outputFormat=json',\n      tags: null,\n      selections: [\n        { key: 'lust', text: 'Lust', value: 'lust' },\n        { key: 'gluttony', text: 'Gluttony', value: 'gluttony' },\n        { key: 'text', text: 'Text', value: 'text' },\n        { key: 'sentiment', text: 'Sentiment', value: 'sentiment' }\n      ]\n    }\n  },\n\n  mounted () {\n    this.mapInit()\n    this.chartBuildMachine()\n    this.chartBuildText()\n  },\n  \n  methods: {\n    // ========================== Init Map ==================================================\n    mapInit(){\n      let map = new google.maps.Map(document.getElementById('map_canvas'), {\n        zoom: 13,\n        center:  {lat: -37.7998, lng: 144.9460},\n        disableDefaultUI: true,\n        styles: mapStyle\n      })\n      \n      let infowindow = new google.maps.InfoWindow()\n\n      // ========================Icon examples=========================\n      let icon = {\n        path: Const.svg_lust,\n        fillColor: '#ff9900',\n        fillOpacity: 1,\n        anchor: new google.maps.Point(250,250),\n        strokeWeight: 0, \n        scale: .1\n      }\n            \n      let icon2 = {\n        path: Const.svg_gluttony,\n        fillColor: '#ff9900',\n        fillOpacity: 1,\n        anchor: new google.maps.Point(250,250),\n        strokeWeight: 0, \n        scale: .1\n      }\n\n      let icon3 = {\n        path: Const.svg_neutral,\n        fillColor: '#ff9900',\n        fillOpacity: 1,\n        anchor: new google.maps.Point(250,250),\n        strokeWeight: 0, \n        scale: .1\n      }\n            \n      let icon4 = {\n        path: Const.svg_positive,\n        fillColor: '#ff9900',\n        fillOpacity: 1,\n        anchor: new google.maps.Point(250,250),\n        strokeWeight: 0, \n        scale: .1\n      }\n\n      let icon5 = {\n        path: Const.svg_negative,\n        fillColor: '#ff9900',\n        fillOpacity: 1,\n        anchor: new google.maps.Point(250,250),\n        strokeWeight: 0, \n        scale: .1\n      }\n\n      let myFoodMark = {lat: -37.8036, lng: 144.9631}\n      let myLustMark = {lat: -37.8136, lng: 144.9631}\n      let myNormalMark = {lat: -37.8036, lng: 144.9531}\n      let myPositiveMark = {lat: -37.8136, lng: 144.9731}\n      let myNegativeMark = {lat: -37.8236, lng: 144.9631}\n\n      let foodMark = new google.maps.Marker({\n        position: myFoodMark,\n        map: map,\n        animation: google.maps.Animation.BOUNCE,\n        title: 'Hello Food!',\n        icon: icon2\n      })\n\n      let lustMark = new google.maps.Marker({\n        position: myLustMark,\n        map: map,\n        animation: google.maps.Animation.BOUNCE,\n        title: 'Hello Lust!',\n        icon: icon\n      })\n\n      let warthMark = new google.maps.Marker({\n        position: myNormalMark,\n        map: map,\n        animation: google.maps.Animation.BOUNCE,\n        title: 'Hello Normal!',\n        icon: icon3\n      })\n\n      let positiveMark = new google.maps.Marker({\n        position: myPositiveMark,\n        map: map,\n        animation: google.maps.Animation.BOUNCE,\n        title: 'Hello Positive!',\n        icon: icon4\n      })\n\n      let negativeMark = new google.maps.Marker({\n        position: myNegativeMark,\n        map: map,\n        animation: google.maps.Animation.BOUNCE,\n        title: 'Hello Negative!',\n        icon: icon5\n      })\n\n      positiveMark.addListener('click', function() {\n        let content = '<div id=\"content\" style=\"min-width:150px;\">'+\n                      '<p>Tags</p>'+\n                      '<button class=\"btn btn-primary btn-dark\">positive</button>'+\n                      '<button class=\"btn btn-primary btn-warning\">positive</button>'+\n                      '<button class=\"btn btn-primary\">positive</button>'+\n                      '</div>';\n        \n        infowindow.setContent(content)\n        infowindow.open(map, positiveMark)\n      })\n    },\n\n    // ========================== Show aurin data on map ====================================\n    mapAurin(type){\n      this.visible=true\n      let map = new google.maps.Map(document.getElementById('map_canvas'), {\n        zoom: 12,\n        center:  {lat: -37.7998, lng: 144.9460},\n        disableDefaultUI: true,\n        styles: mapStyle\n      })\n      google.maps.event.addListenerOnce(map, 'idle', () => {\n        this.visible=false\n      })\n      let colors = this.gradient('#ffffff','#ff9900',7)\n\n      map.data.loadGeoJson(this.vic_geo)\n      map.data.setStyle((feature) => {\n        let name = feature.getProperty('vic_lga__3')\n        let total = 0\n\n        if (Const.aurin[`${name}`]){\n          if (Const.aurin[`${name}`][`${type[0]}`][`${type[1]}`]){\n            total = Const.aurin[`${name}`][`${type[0]}`][`${type[1]}`]\n          }\n        }\n\n        let color = '#000000'\n        if (total > 1)\n          color = colors[0]\n        if (total > 1000)\n          color = colors[1]\n        if (total > 3000)\n          color = colors[2]\n        if (total > 5000)\n          color = colors[3]\n        if (total > 10000)\n          color = colors[4]\n        if (total > 15000)\n          color = colors[5]\n        if (total > 20000)\n          color = colors[6]  \n\n        return {\n          fillColor: color,\n          fillOpacity: 0.7,\n          strokeWeight: 1\n        }\n      })\n \n    },\n\n    // ========================== Build Map =================================================\n    mapBuild(scope){\n      let map = new google.maps.Map(document.getElementById('map_canvas'), {\n        zoom: 12,\n        center:  {lat: -37.7998, lng: 144.9460},\n        disableDefaultUI: true,\n        styles: mapStyle\n      })\n\n      let infowindow = new google.maps.InfoWindow()\n      let marker, i\n      let markers = []\n      let locations = []\n      let colors = this.gradient('#ffffff','#ff9900',7)\n     \n\n      this.barDataLabel.length=0\n      this.barData.length=0\n\n      // ======================== Setup each region/ Collect bar data ==========================\n      // set style for each region\n      map.data.loadGeoJson(this.melb_geo)\n      if (scope == 'melb') {\n        map.data.setStyle((feature) => {\n          let total = feature.getProperty('total')\n          let name = feature.getProperty('name')\n\n          if (!this.barDataLabel.includes(name)){\n            this.barDataLabel.push(name)\n            this.barData.push(total)\n          }\n          let color = '#000000'\n          if (total > 1)\n            color = colors[0]\n          if (total > 100)\n            color = colors[1]\n          if (total > 300)\n            color = colors[2]\n          if (total > 500)\n            color = colors[3]\n          if (total > 1000)\n            color = colors[4]\n          if (total > 1500)\n            color = colors[5]\n          if (total > 2000)\n            color = colors[6]  \n\n          return {\n            fillColor: color,\n            fillOpacity: 0.7,\n            strokeWeight: 1\n          }\n        })\n      } else {\n         map.data.setStyle((feature) => {\n          let total = feature.getProperty('total')\n          let name = feature.getProperty('name')\n\n          if (!this.barDataLabel.includes(name)){\n            this.barDataLabel.push(name)\n            this.barData.push(total)\n          }\n          let color = '#000000'\n          if (total > 1)\n            color = colors[0]\n          if (total > 1000)\n            color = colors[1]\n          if (total > 3000)\n            color = colors[2]\n          if (total > 5000)\n            color = colors[3]\n          if (total > 10000)\n            color = colors[4]\n          if (total > 15000)\n            color = colors[5]\n          if (total > 20000)\n            color = colors[6]  \n\n          return {\n            fillColor: color,\n            fillOpacity: 0.7,\n            strokeWeight: 1\n          }\n        })\n      }\n      // setup bar data\n      this.barDatacollection = {\n        labels: this.barDataLabel,\n        datasets: [\n          {\n            label: 'Total Sins',\n            backgroundColor: '#ff9900',\n            data: this.barData\n          }\n        ]\n      }\n\n      // mouse click event: show grid info\n      map.data.addListener('click', (event) => {\n        // prepare data\n        let name = event.feature.getProperty(\"name\")\n        let statistics = event.feature.getProperty(\"statistcs\")\n \n        let infoPieDataSentiment = [] \n        let infoPieNameSentiment = []\n        let infoPieData = []\n        let infoPieName = []\n        let temp = 'sentiment'\n\n        for (const [key, value] of Object.entries(statistics.sentiment)) {\n          infoPieNameSentiment.push(key)\n          infoPieDataSentiment.push(value)\n        }\n\n        for (const [key, value] of Object.entries(statistics)) {\n          if (key != temp){\n            for(const [inner_key, inner_value] of Object.entries(value)) {\n              infoPieName.push(inner_key)\n              infoPieData.push(inner_value)\n            }\n          }\n        }\n\n        // set all chart data here\n        let pieDatacollection_sentiment = {\n          labels: infoPieNameSentiment,\n          datasets: [\n            {\n              label: 'Sentiment',\n              backgroundColor: this.gradient('#F5F5F5','ff9900',infoPieDataSentiment.length) ,\n              data: infoPieDataSentiment\n            }\n          ]\n        }\n\n        let pieDatacollection = {\n          labels: infoPieName,\n          datasets: [\n            {\n              label: 'Sin',\n              backgroundColor: this.gradient('#F5F5F5','ff9900',infoPieData.length) ,\n              data: infoPieData\n            }\n          ]\n        }\n        \n        // init infowindow with customized view\n        let InfoWindow = Vue.extend(InfoWindowComponent)\n        \n        // send data to the view\n        let instance = new InfoWindow({\n          propsData: {\n            name,\n            pieDatacollection_sentiment,\n            pieDatacollection\n          }\n        })\n        \n        instance.$mount()\n\n        infowindow.setContent(instance.$el)\n        //infowindow.setPosition(event.feature.getGeometry().getAt(0).getAt(0).getAt(0))\n        infowindow.setPosition(event.latLng)\n        //infowindow.setOptions({pixelOffset: new google.maps.Size(0,0)})\n        infowindow.open(map)\n      })\n      \n      // mouse over event: highlight color\n      map.data.addListener('mouseover', (event) => {\n        map.data.overrideStyle(event.feature, {fillColor: 'black'})\n      })\n\n      // mouse our event: reset color/info-window\n      map.data.addListener('mouseout', (event) => {\n        map.data.revertStyle()\n        infowindow.close()\n      })\n    },\n\n    // ====================== Get Map Data ==================================================\n    mapBuildZone(zone, scope) {\n      this.visible = true\n      this.$ajax({\n        url: zone,\n        method: 'GET',\n      }).then(res => {\n          this.melb_geo = res.data.url,\n          this.visible = false,\n          console.log(this.melb_geo),\n          // re-render the map here\n          this.flash('success', 'success',{timeout: 3000}),\n          this.mapBuild(scope)\n        })\n        .catch(error => {\n          this.visible = false,\n          this.flash(`${error}`, 'error'),\n          this.errored = true\n      })    \n    },\n\n    // ====================== Get Machine Learning Data =====================================\n    chartBuildMachine() {\n      this.visilbe = true\n      this.$ajax({\n        url: '/api/statistics/machine/',\n        method: 'GET',\n      }).then(res => {\n        this.machineDatacollection_lust = {\n          labels: res.data.lust.key,\n          datasets: [\n            {\n              label: 'Lust',\n              backgroundColor: this.gradient('#ff9900','#ffffff', res.data.lust.key.length),\n              data: res.data.lust.value\n            }\n          ]\n        }\n        this.machineDatacollection_gluttony = {\n          labels: res.data.gluttony.key,\n          datasets: [\n            {\n              label: 'Gluttony',\n              backgroundColor: this.gradient('#ff9900','#ffffff', res.data.gluttony.key.length),\n              data: res.data.gluttony.value\n            }\n          ]\n        }\n        this.visible = false\n      })\n      .catch(error => {\n        this.visible = false,\n        this.flash(`${error}`, 'error'),\n        this.errored = true\n      }) \n    },\n\n    // ====================== Get NLP Learning Data =========================================\n    chartBuildText() {\n      this.visilbe = true\n      this.$ajax({\n        url: '/api/statistics/text/',\n        method: 'GET',\n      }).then(res => {\n        console.log(res)\n        this.textDatacollection = {\n          labels: res.data.text.key,\n          datasets: [\n            {\n              label: 'Text',\n              backgroundColor: this.gradient('#ff9900','#ffffff', res.data.text.key.length),\n              data: res.data.text.value\n            }\n          ]\n        }\n        this.sentimentDatacollection = {\n          labels: res.data.sentiment.key,\n          datasets: [\n            {\n              label: 'Sentiment',\n              backgroundColor: this.gradient('#F5F5F5','ff9900', res.data.sentiment.key.length),\n              data: res.data.sentiment.value\n            }\n          ]\n        }\n        this.visible = false\n      })\n      .catch(error => {\n        this.visible = false,\n        this.flash(`${error}`, 'error'),\n        this.errored = true\n      }) \n    },\n\n    // ====================== Track 1 User by ID ============================================\n    mapBuildTrack(){\n      this.visible = true\n      let map = new google.maps.Map(document.getElementById('map_canvas'), {\n        zoom: 13,\n        center:  {lat: -37.7998, lng: 144.9460},\n        disableDefaultUI: true,\n        styles: mapStyle\n      })\n\n      let infowindow = new google.maps.InfoWindow()\n      let path = []\n      let sDate = new Date(this.start_time)\n      let eDate = new Date(this.end_time)\n      let start_time = this.toISOLocal(sDate).replace(/T/g, \" \"),\n          end_time = this.toISOLocal(eDate).replace(/T/g, \" \")\n      let noData = false\n\n      if (start_time.includes('NaN') || end_time.includes('NaN'))\n        start_time = end_time = null\n        \n      let data = {\n        //start_time: '2016-01-09 10:00:00+1000',\n        //end_time: '2016-10-09 10:00:00+1000',\n        start_time,\n        end_time,\n        tags: this.tags,\n        threshold: 0.9\n      }\n        \n      console.log(data)\n\n      this.$ajax({\n        url: `/api/statistics/track/${this.user_id}/`,\n        method: 'POST',\n        data: data\n      }).then(res => {\n\n        console.log(res.data)\n        \n        if (Object.keys(res.data).length === 0)\n          this.flash('no data match current query', 'error')\n          noData = true\n\n        for (const [key, value] of Object.entries(res.data)) {\n          let point = {\n            lat: value[0].geo[1], \n            lng: value[0].geo[0]\n          }\n          \n          path.push(point)\n          let svg_icon = Const.svg_neutral\n\n          if (value[0].tags.sentiment){\n            if (value[0].tags.sentiment[0] == 'positive'){\n              svg_icon = Const.svg_positive\n            }\n            if (value[0].tags.sentiment[0] == 'negative'){\n              svg_icon = Const.svg_negative\n            }\n          }\n\n          let icon = {\n            path: svg_icon,\n            fillColor: '#ff9900',\n            fillOpacity: 1,\n            anchor: new google.maps.Point(250,250),\n            strokeWeight: 0, \n            scale: .1\n          }\n\n          let marker = new google.maps.Marker({\n            position: point,\n            map: map,\n            icon: icon,\n            title: value[0].time + value[0].text\n          })\n\n          let tag_content = ''\n        \n          for (const [mainTag, subTags] of Object.entries(value[0].tags)){\n            subTags.forEach(tag => {\n              tag_content = tag_content + `<button class=\"btn btn-primary btn-dark\">${tag}</button>`\n            })\n          }\n\n          if (value[0].img_id.length>0){\n            value[0].img_id.forEach(img => {\n              tag_content = tag_content + `<a class=\"btn btn-warning\" target=\"_blank\" href=\"http://172.26.37.225/api/tweet/pic/${img}\">IMAGE</a>`\n            })\n          }\n\n          let content = '<div id=\"content\" style=\"min-width:150px;\">'+\n            '<h4 class=\"font-weight-bold\">'+ key +'</h4>'+\n            tag_content+\n            '</div>'\n\n          marker.addListener('click', () => {     \n            infowindow.setContent(content)\n            infowindow.open(map, marker)\n          })\n\n          value.slice(1).forEach((track) => {\n            svg_icon = Const.svg_neutral\n            if (track.tags.sentiment){\n              if (track.tags.sentiment[0] == 'positive'){\n                svg_icon = Const.svg_positive\n              }\n              if (track.tags.sentiment[0] == 'negative'){\n                svg_icon = Const.svg_negative\n              }\n            }\n\n            let icon_sm= {\n              path: svg_icon,\n              fillColor: '#ff9900',\n              fillOpacity: 1,\n              anchor: new google.maps.Point(250,250),\n              strokeWeight: 0, \n              scale: .05\n            }\n\n            point = {\n              lat: track.geo[1], \n              lng: track.geo[0]\n            }\n\n            let marker = new google.maps.Marker({\n              position: point,\n              map: map,\n              icon: icon_sm,\n              title: track.time + track.text\n            })\n\n            tag_content = ''\n\n            for (const [mainTag, subTags] of Object.entries(track.tags)){\n              subTags.forEach(tag => {\n                tag_content = tag_content + `<button class=\"btn btn-primary btn-dark\">${tag}</button>`\n              })\n            }\n\n            if (track.img_id.length>0){\n              track.img_id.forEach(img => {\n                tag_content = tag_content + `<a class=\"btn btn-warning\" target=\"_blank\" href=\"http://172.26.37.225/api/tweet/pic/${img}\">IMAGE</a>`\n              })\n            }\n\n            let content = '<div id=\"content\" style=\"min-width:150px;\">'+\n              '<p class=\"font-weight-bold\">Tags</p>'+\n              tag_content+\n              '</div>'\n\n            marker.addListener('click', () => {\n              infowindow.setContent(content)\n              infowindow.open(map, marker)\n            })\n\n            path.push(point)\n          })\n        }\n      }).then(() => {\n        let trackPath = new google.maps.Polyline({\n          path: path,\n          geodesic: true,\n          strokeColor: '#ff9900',\n          strokeOpacity: 1.0,\n          strokeWeight: 2,\n        })\n        google.maps.event.addListener(trackPath, 'mouseover', () => {\n          trackPath.setOptions({strokeWeight: 4})\n        })\n        google.maps.event.addListener(trackPath, 'mouseout', () => {\n          trackPath.setOptions({strokeWeight: 2})\n        })\n        trackPath.setMap(map)\n        if (noData == false)\n          this.flash('tracking success', 'success',{timeout: 3000})\n          this.flash('tracking success', 'success',{timeout: 3000})\n        this.visible = false\n      }).catch(error => {\n        this.flash(`${error}`, 'error'),\n        this.visible = false\n        this.errored = true\n      })\n    },\n\n    // ====================== Track random n users ==========================================\n    mapBuildTrackN() {\n      this.visible = true\n      let map = new google.maps.Map(document.getElementById('map_canvas'), {\n        zoom: 13,\n        center:  {lat: -37.7998, lng: 144.9460},\n        disableDefaultUI: true,\n        styles: mapStyle\n      })\n\n      let infowindow = new google.maps.InfoWindow()\n      let paths = []\n      let colors = []\n      let sDate = new Date(this.start_time)\n      let eDate = new Date(this.end_time)\n      let noData = false\n      \n      let start_time = this.toISOLocal(sDate).replace(/T/g, \" \"),\n          end_time = this.toISOLocal(eDate).replace(/T/g, \" \")\n\n      if (start_time.includes('NaN') || end_time.includes('NaN'))\n        start_time = end_time = null\n        \n      let data = {\n        //start_time: '2016-01-09 10:00:00+1000',\n        //end_time: '2016-10-09 10:00:00+1000',\n        start_time,\n        end_time,\n        tags: this.tags,\n        skip: parseInt(this.skip),\n        threshold: 0.9,\n        single: 20  \n      }\n\n      console.log(data)\n      \n      this.$ajax({\n        url: `/api/statistics/track/random/${this.number}/`,\n        method: 'POST',\n        data: data\n      }).then(res => {\n        if (Object.keys(res.data).length === 0)\n          this.flash('no data match current query', 'error')\n          noData = true\n        \n        console.log(res.data)\n\n        for (const [key, value] of Object.entries(res.data)) {\n          let point = {\n            lat: value[0].geo[1], \n            lng: value[0].geo[0]\n          }\n          let color = this.getRandomColor()\n          let path = []\n          path.push(point)\n          colors.push(color)\n          let svg_icon = Const.svg_neutral\n\n          if (value[0].tags.sentiment){\n            if (value[0].tags.sentiment[0] == 'positive'){\n              svg_icon = Const.svg_positive\n            }\n            if (value[0].tags.sentiment[0] == 'negative'){\n              svg_icon = Const.svg_negative\n            }\n          }\n          \n          let icon = {\n            path: svg_icon,\n            fillColor: color,\n            fillOpacity: 1,\n            anchor: new google.maps.Point(250,250),\n            strokeWeight: 0, \n            scale: .1\n          }\n\n          let marker = new google.maps.Marker({\n            position: point,\n            map: map,\n            icon: icon,\n            title: value[0].time\n          })\n\n          let tag_content = ''\n\n          for (const [mainTag, subTags] of Object.entries(value[0].tags)){\n            subTags.forEach(tag => {\n              tag_content = tag_content + `<button class=\"btn btn-primary btn-dark\">${tag}</button>`\n            })\n          }\n\n          if (value[0].img_id.length>0){\n            value[0].img_id.forEach(img => {\n              tag_content = tag_content + `<a class=\"btn btn-warning\" target=\"_blank\" href=\"http://172.26.37.225/api/tweet/pic/${img}\">IMAGE</a>`\n            })\n          }\n\n          let content = '<div id=\"content\" style=\"min-width:150px;\">'+\n            '<h4 class=\"font-weight-bold\">'+ key +'</h4>'+\n            tag_content+\n            '</div>'\n\n          marker.addListener('click', () => {\n            infowindow.setContent(content)\n            infowindow.open(map, marker)\n          })\n\n          value.slice(1).forEach((track) => {\n            svg_icon = Const.svg_neutral\n            if (track.tags.sentiment){\n              if (track.tags.sentiment[0] == 'positive'){\n                svg_icon = Const.svg_positive\n              }\n              if (track.tags.sentiment[0] == 'negative'){\n                svg_icon = Const.svg_negative\n              }\n            }\n\n            let icon_sm= {\n              path: svg_icon,\n              fillColor: color,\n              fillOpacity: 1,\n              anchor: new google.maps.Point(250,250),\n              strokeWeight: 0, \n              scale: .05\n            }\n\n            point = {\n              lat: track.geo[1], \n              lng: track.geo[0]\n            }\n\n            let marker = new google.maps.Marker({\n              position: point,\n              map: map,\n              icon: icon_sm,\n              title: track.time\n            })\n\n            let tag_content = ''\n\n            for (const [mainTag, subTags] of Object.entries(track.tags)){\n              subTags.forEach(tag => {\n                tag_content = tag_content + `<button class=\"btn btn-primary btn-dark\">${tag}</button>`\n              })\n            }\n\n            if (track.img_id.length>0){\n              track.img_id.forEach(img => {\n                tag_content = tag_content + `<a class=\"btn btn-warning\" target=\"_blank\" href=\"http://172.26.37.225/api/tweet/pic/${img}\">IMAGE</a>`\n              })\n            }\n\n            let content = '<div id=\"content\" style=\"min-width:150px;\">'+\n              '<p class=\"font-weight-bold\">Tags</p>'+\n              tag_content+\n              '</div>'\n\n            marker.addListener('click', () => {\n              infowindow.setContent(content)\n              infowindow.open(map, marker)\n            })\n\n            path.push(point)\n          })\n          paths.push(path)\n        }\n      }).then(() => {\n        paths.forEach((path,j) => {\n          let trackPath = new google.maps.Polyline({\n            path: path,\n            geodesic: true,\n            strokeColor: colors[j],\n            strokeOpacity: 1.0,\n            strokeWeight: 2,\n          })\n          google.maps.event.addListener(trackPath, 'mouseover', () => {\n            trackPath.setOptions({strokeWeight: 4})\n          })\n          google.maps.event.addListener(trackPath, 'mouseout', () => {\n            trackPath.setOptions({strokeWeight: 2})\n          })\n          trackPath.setMap(map)\n        })\n        if (noData == false)\n          this.flash(`${paths.length} users found`, 'success',{timeout: 3000})\n          this.flash(`${paths.length} users found`, 'success',{timeout: 3000})\n        this.visible = false\n      }).catch(error => {\n        console.log(error)\n        this.flash(`${error}`, 'error'),\n        this.visible = false\n        this.errored = true\n      })\n    },\n\n    // ====================== Time formatter =================================================\n    toISOLocal(d) {\n      let z = n => (n<10? '0':'')+n;\n      let off = d.getTimezoneOffset();\n      let sign = off < 0? '+' : '-';\n      off = Math.abs(off);\n\n      return d.getFullYear() + '-' + z(d.getMonth()+1) + '-' +\n            z(d.getDate()) + 'T' + z(d.getHours()) + ':'  + z(d.getMinutes()) + \n            ':' + z(d.getSeconds()) + sign + z(off/60|0) + z(off%60); \n    },\n\n    // ====================== Color generators ===============================================\n    getRandomColor() {\n      const letters = '0123456789ABCDEF';\n      let color = '#';\n      for (let i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n      }\n      return color;\n    },\n\n    rgbToHex(r, g, b) {\n      var hex = ((r<<16) | (g<<8) | b).toString(16);\n      return \"#\" + new Array(Math.abs(hex.length-7)).join(\"0\") + hex;\n    },\n\n    hexToRgb(hex) {\n      var rgb = [];\n      for(var i=1; i<7; i+=2){\n        rgb.push(parseInt(\"0x\" + hex.slice(i,i+2)));\n      }\n      return rgb;\n    },\n\n    gradient (startColor,endColor,step) {\n      var sColor = this.hexToRgb(startColor),\n          eColor = this.hexToRgb(endColor);\n\n      var rStep = (eColor[0] - sColor[0]) / step,\n          gStep = (eColor[1] - sColor[1]) / step,\n          bStep = (eColor[2] - sColor[2]) / step;\n\n      var gradientColorArr = [];\n      for(var i=0;i<step;i++){\n          gradientColorArr.push(this.rgbToHex(parseInt(rStep*i+sColor[0]),parseInt(gStep*i+sColor[1]),parseInt(bStep*i+sColor[2])));\n      }\n      return gradientColorArr;\n    }\n  }\n}\n</script>\n\n\n<style>\n@import '~bootstrap/dist/css/bootstrap.css';\n@import '~bootstrap-vue/dist/bootstrap-vue.css';\n#header #logo {\n  background: url(\"../assets/images/logo_premium.png\") center;\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-color: transparent;\n  position: fixed;\n  width: 12em;\n  height: 6em;\n  top: 0;\n  left: 3em;\n}\n#gmap {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 0px;\n  background-color:#bbb;\n  position: relative;\n}\n#onmap {\n  background-color:#ff9900;\n  position: absolute; \n  top: 100px; \n  right: 20px; \n  z-index: 9999; \n  border-radius: 25px;\n  width: 320px;\n}\n#onmap2 {\n  background-color:#ff9900;\n  position: absolute; \n  top: 250px; \n  right: 20px; \n  z-index: 9998; \n  border-radius: 25px;\n  width: 320px;\n}\na.anchor {\n  display: block;\n  position: relative;\n  top: -6em;\n  visibility: hidden;\n}\n.line{\n  height: 1em;\n  border-bottom: 2px solid rgb(44, 44, 44);\n}\n.divider{\n  width:1em;\n  height:auto;\n  display:inline-block;\n}\n</style>"],"sourceRoot":"src/views"}]}