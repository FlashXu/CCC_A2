{"remainingRequest":"/Users/taylor/Documents/COMP90024/A2/COMP90024-2019S1-Team7-TrackerHub-master/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/taylor/Documents/COMP90024/A2/COMP90024-2019S1-Team7-TrackerHub-master/frontend/src/views/Landing.vue?vue&type=template&id=a8baa566&","dependencies":[{"path":"/Users/taylor/Documents/COMP90024/A2/COMP90024-2019S1-Team7-TrackerHub-master/frontend/src/views/Landing.vue","mtime":1587872588991},{"path":"/Users/taylor/Documents/COMP90024/A2/COMP90024-2019S1-Team7-TrackerHub-master/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/taylor/Documents/COMP90024/A2/COMP90024-2019S1-Team7-TrackerHub-master/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/taylor/Documents/COMP90024/A2/COMP90024-2019S1-Team7-TrackerHub-master/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/taylor/Documents/COMP90024/A2/COMP90024-2019S1-Team7-TrackerHub-master/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}