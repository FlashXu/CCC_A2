{"remainingRequest":"/Users/taylor/Documents/COMP90024/A2/COMP90024-2019S1-Team7-TrackerHub-master/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/taylor/Documents/COMP90024/A2/COMP90024-2019S1-Team7-TrackerHub-master/frontend/src/views/Map.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/taylor/Documents/COMP90024/A2/COMP90024-2019S1-Team7-TrackerHub-master/frontend/src/views/Map.vue","mtime":1561893340000},{"path":"/Users/taylor/Documents/COMP90024/A2/COMP90024-2019S1-Team7-TrackerHub-master/frontend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/taylor/Documents/COMP90024/A2/COMP90024-2019S1-Team7-TrackerHub-master/frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/taylor/Documents/COMP90024/A2/COMP90024-2019S1-Team7-TrackerHub-master/frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/taylor/Documents/COMP90024/A2/COMP90024-2019S1-Team7-TrackerHub-master/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/taylor/Documents/COMP90024/A2/COMP90024-2019S1-Team7-TrackerHub-master/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpAaW1wb3J0ICd+Ym9vdHN0cmFwL2Rpc3QvY3NzL2Jvb3RzdHJhcC5jc3MnOwpAaW1wb3J0ICd+Ym9vdHN0cmFwLXZ1ZS9kaXN0L2Jvb3RzdHJhcC12dWUuY3NzJzsKI2hlYWRlciAjbG9nbyB7CiAgYmFja2dyb3VuZDogdXJsKCIuLi9hc3NldHMvaW1hZ2VzL2xvZ29fcHJlbWl1bS5wbmciKSBjZW50ZXI7CiAgYmFja2dyb3VuZC1zaXplOiBjb250YWluOwogIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7CiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7CiAgcG9zaXRpb246IGZpeGVkOwogIHdpZHRoOiAxMmVtOwogIGhlaWdodDogNmVtOwogIHRvcDogMDsKICBsZWZ0OiAzZW07Cn0KI2dtYXAgewogIGZvbnQtZmFtaWx5OiAnQXZlbmlyJywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjsKICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDsKICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlOwogIHRleHQtYWxpZ246IGNlbnRlcjsKICBjb2xvcjogIzJjM2U1MDsKICBtYXJnaW4tdG9wOiAwcHg7CiAgYmFja2dyb3VuZC1jb2xvcjojYmJiOwogIHBvc2l0aW9uOiByZWxhdGl2ZTsKfQojb25tYXAgewogIGJhY2tncm91bmQtY29sb3I6I2ZmOTkwMDsKICBwb3NpdGlvbjogYWJzb2x1dGU7IAogIHRvcDogMTAwcHg7IAogIHJpZ2h0OiAyMHB4OyAKICB6LWluZGV4OiA5OTk5OyAKICBib3JkZXItcmFkaXVzOiAyNXB4OwogIHdpZHRoOiAzMjBweDsKfQojb25tYXAyIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiNmZjk5MDA7CiAgcG9zaXRpb246IGFic29sdXRlOyAKICB0b3A6IDI1MHB4OyAKICByaWdodDogMjBweDsgCiAgei1pbmRleDogOTk5ODsgCiAgYm9yZGVyLXJhZGl1czogMjVweDsKICB3aWR0aDogMzIwcHg7Cn0KYS5hbmNob3IgewogIGRpc3BsYXk6IGJsb2NrOwogIHBvc2l0aW9uOiByZWxhdGl2ZTsKICB0b3A6IC02ZW07CiAgdmlzaWJpbGl0eTogaGlkZGVuOwp9Ci5saW5lewogIGhlaWdodDogMWVtOwogIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCByZ2IoNDQsIDQ0LCA0NCk7Cn0KLmRpdmlkZXJ7CiAgd2lkdGg6MWVtOwogIGhlaWdodDphdXRvOwogIGRpc3BsYXk6aW5saW5lLWJsb2NrOwp9Cg=="},{"version":3,"sources":["Map.vue"],"names":[],"mappingshCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Map.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div id=\"gmap\">\n    <loading :active.sync=\"visible\" :can-cancel=\"true\"></loading>\n    <!-- Map -->\n    <div id=\"map_canvas\" style=\"height: 100vh; width: 100%\" ></div>\n    <!-- Div on top of the map -->\n    <div id=\"onmap\">\n      <div class=\"container mt-3\">\n         <h2>General Search</h2>\n        <div>     \n          <b-dropdown id=\"dropdown-1\" text=\"Aurin\" class=\"m-md-2\">\n            <b-dropdown-item @click=\"mapAurin(['econ','unemployment_num'])\">Unemployment</b-dropdown-item>\n            <b-dropdown-item @click=\"mapAurin(['econ','total_people_hospital'])\">Total Hospital Admission</b-dropdown-item>\n            <b-dropdown-item @click=\"mapAurin(['econ','total_male_hospital'])\">Male Hospital Admission</b-dropdown-item>\n            <b-dropdown-item @click=\"mapAurin(['econ','total_female_hospital'])\">Female Hospital Admission</b-dropdown-item>\n            <b-dropdown-divider></b-dropdown-divider>\n            <b-dropdown-item @click=\"mapAurin(['offence','weapons related'])\">Weapon Releted</b-dropdown-item>\n            <b-dropdown-item @click=\"mapAurin(['offence','assaults'])\">Assaults</b-dropdown-item>\n            <b-dropdown-item @click=\"mapAurin(['offence','sexual offences'])\">Sexual Offences</b-dropdown-item>\n            <b-dropdown-item @click=\"mapAurin(['offence','robbery'])\">Robbery</b-dropdown-item>\n            <b-dropdown-item @click=\"mapAurin(['offence','harassment and threatening'])\">Harassment and Threatening</b-dropdown-item>\n            <b-dropdown-item @click=\"mapAurin(['offence','total'])\">Total Offence</b-dropdown-item>\n          </b-dropdown>\n          <div class=\"divider\"/>\n          <button class=\"btn btn-dark\" \n            @click=\"mapBuildZone('/api/statistics/zone/','melb')\">Melbourne\n          </button>\n          <div class=\"divider\"/>\n          <button class=\"btn btn-dark\" \n            @click=\"mapBuildZone('/api/statistics/vic/zone/','vic')\">VIC\n          </button>\n\n        </div>\n      </div>\n      <p></p>\n      <div></div>\n    </div>  \n    <div id=\"onmap2\">    \n      <div class=\"container mt-3\">\n        <p></p>\n        <h2>User Track</h2>\n        <p>Track user by user ID:</p>\n        <input class=\"form-control\" v-model=\"user_id\" type=\"text\" placeholder=\"Search..\">\n        <div id=\"myDIV\" class=\"mt-3\">\n          <button class=\"btn btn-dark\" :disabled=\"tags == null || tags == '' || user_id == ''\" @click=\"mapBuildTrack()\">Track</button>\n        </div>\n      </div> \n        <div class=\"container mt-3\">\n        <p>Track random number of users:</p>\n        <input class=\"form-control\" v-model=\"number\" type=\"number\" placeholder=\"Search..\">\n        <br>\n        <p>Skip:</p>\n        <input class=\"form-control\" v-model=\"skip\" type=\"number\" placeholder=\"Skip..\">\n        <div id=\"myDIV2\" class=\"mt-3\">\n          <button class=\"btn btn-dark\" :disabled=\"tags == null || tags == ''\" @click=\"mapBuildTrackN()\">Track</button>\n        </div>\n        <p></p>\n        <div></div>\n      </div>     \n    </div>\n    \n    <!-- Charts -->\n    <a class=\"anchor\" id=\"anchor1\"></a>\n    <div id=\"chart\" class=\"container-fluid w-100 d-inline-block\" style=\"height: 100vh;z-index:0;\">\n      <div class=\"row\">\n        <div class=\"col-lg-12\"><Barchart :chartData=\"this.barDatacollection\" :height=\"700\" :width=\"2000\" /></div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-lg-3\"><Piechart :pieData=\"this.machineDatacollection_lust\"/></div>\n        <div class=\"col-lg-3\"><Piechart :pieData=\"this.machineDatacollection_gluttony\"/></div>\n        <div class=\"col-lg-3\"><Piechart :pieData=\"this.textDatacollection\"/></div>\n        <div class=\"col-lg-3\"><Piechart :pieData=\"this.sentimentDatacollection\"/></div>\n      </div> \n    </div>  \n\n    <!-- Tool Navbar -->\n    <nav class=\"navbar fixed-bottom navbar-light\">\n      <div class=\"row\" style=\"width: 100vw;\">\n        <div style=\"margin-left: 30px;\">\n          <span class=\"pull-left\">\n          <datetime v-model=\"start_time\" :type=\"'date'\" :title=\"'Select your start time'\"></datetime>\n          </span>\n        </div>\n        <div style=\"margin-left: 30px;\">\n          <a class=\"navbar-brand font-weight-bold text-white\">To</a>\n        </div>\n        <div style=\"margin-left: 15px;\">\n          <datetime v-model=\"end_time\" :type=\"'date'\" :title=\"'Select your end time'\"></datetime>\n        </div>\n        <div class=\"col-md-3\">\n          <sui-dropdown\n            fluid\n            multiple\n            :options=\"selections\"\n            placeholder=\"Sins\"\n            selection\n            v-model=\"tags\"\n          />\n        </div>\n\n        <div class=\"col-md-4\" style=\"height: 4vh; margin-bottom: 1vh;\">\n          <flash-message transitionIn=\"animated swing\"></flash-message>\n        </div>\n      </div>\n    </nav>\n\n  </div>\n</template>\n\n\n<script>\nimport Barchart from './../components/Barchart'\nimport Linechart from './../components/Linechart'\nimport Piechart from './../components/Piechart'\nimport Radarchart from './../components/Radarchart'\nimport {mapStyle} from './../assets/js/map-style'\nimport {Const} from './../assets/js/const'\nimport InfoWindowComponent from './InfoWindow'\nimport Vue from 'vue'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport {Datetime} from 'vue-datetime'\nimport 'vue-datetime/dist/vue-datetime.css'\nimport Loading from 'vue-loading-overlay'\nimport 'vue-loading-overlay/dist/vue-loading.css'\n\nexport default {\n  name: 'gmap',\n  components: {\n    Radarchart,\n    Piechart,\n    Linechart,\n    Barchart,\n    datetime: Datetime,\n    Loading\n  },\n\n  data() {\n    return {\n      visible: false,\n      pieData: [4,5,6,7],\n      barData: [],\n      barDataLabel: [],\n      radarData: [],\n      lineData: [],\n\n      machineDatacollection_lust: null,\n      machineDatacollection_gluttony: null,\n      textDatacollection:null,\n      sentimentDatacollection: null,\n      barDatacollection: null,\n\n      start_time: new Date().toString(),\n      end_time: new Date().toString(),\n      user_id: '',\n      number: 1,\n      skip: 0,\n      vic_geo: 'https://data.gov.au/geoserver/vic-local-government-areas-psma-administrative-boundaries/wfs?request=GetFeature&typeName=ckan_bdf92691_c6fe_42b9_a0e2_a4cd716fa811&outputFormat=json',\n      melb_geo: 'https://data.gov.au/geoserver/vic-local-government-areas-psma-administrative-boundaries/wfs?request=GetFeature&typeName=ckan_bdf92691_c6fe_42b9_a0e2_a4cd716fa811&outputFormat=json',\n      tags: null,\n      selections: [\n        { key: 'lust', text: 'Lust', value: 'lust' },\n        { key: 'gluttony', text: 'Gluttony', value: 'gluttony' },\n        { key: 'text', text: 'Text', value: 'text' },\n        { key: 'sentiment', text: 'Sentiment', value: 'sentiment' }\n      ]\n    }\n  },\n\n  mounted () {\n    this.mapInit()\n    this.chartBuildMachine()\n    this.chartBuildText()\n  },\n  \n  methods: {\n    // ========================== Init Map ==================================================\n    mapInit(){\n      let map = new google.maps.Map(document.getElementById('map_canvas'), {\n        zoom: 13,\n        center:  {lat: -37.7998, lng: 144.9460},\n        disableDefaultUI: true,\n        styles: mapStyle\n      })\n      \n      let infowindow = new google.maps.InfoWindow()\n\n      // ========================Icon examples=========================\n      let icon = {\n        path: Const.svg_lust,\n        fillColor: '#ff9900',\n        fillOpacity: 1,\n        anchor: new google.maps.Point(250,250),\n        strokeWeight: 0, \n        scale: .1\n      }\n            \n      let icon2 = {\n        path: Const.svg_gluttony,\n        fillColor: '#ff9900',\n        fillOpacity: 1,\n        anchor: new google.maps.Point(250,250),\n        strokeWeight: 0, \n        scale: .1\n      }\n\n      let icon3 = {\n        path: Const.svg_neutral,\n        fillColor: '#ff9900',\n        fillOpacity: 1,\n        anchor: new google.maps.Point(250,250),\n        strokeWeight: 0, \n        scale: .1\n      }\n            \n      let icon4 = {\n        path: Const.svg_positive,\n        fillColor: '#ff9900',\n        fillOpacity: 1,\n        anchor: new google.maps.Point(250,250),\n        strokeWeight: 0, \n        scale: .1\n      }\n\n      let icon5 = {\n        path: Const.svg_negative,\n        fillColor: '#ff9900',\n        fillOpacity: 1,\n        anchor: new google.maps.Point(250,250),\n        strokeWeight: 0, \n        scale: .1\n      }\n\n      let myFoodMark = {lat: -37.8036, lng: 144.9631}\n      let myLustMark = {lat: -37.8136, lng: 144.9631}\n      let myNormalMark = {lat: -37.8036, lng: 144.9531}\n      let myPositiveMark = {lat: -37.8136, lng: 144.9731}\n      let myNegativeMark = {lat: -37.8236, lng: 144.9631}\n\n      let foodMark = new google.maps.Marker({\n        position: myFoodMark,\n        map: map,\n        animation: google.maps.Animation.BOUNCE,\n        title: 'Hello Food!',\n        icon: icon2\n      })\n\n      let lustMark = new google.maps.Marker({\n        position: myLustMark,\n        map: map,\n        animation: google.maps.Animation.BOUNCE,\n        title: 'Hello Lust!',\n        icon: icon\n      })\n\n      let warthMark = new google.maps.Marker({\n        position: myNormalMark,\n        map: map,\n        animation: google.maps.Animation.BOUNCE,\n        title: 'Hello Normal!',\n        icon: icon3\n      })\n\n      let positiveMark = new google.maps.Marker({\n        position: myPositiveMark,\n        map: map,\n        animation: google.maps.Animation.BOUNCE,\n        title: 'Hello Positive!',\n        icon: icon4\n      })\n\n      let negativeMark = new google.maps.Marker({\n        position: myNegativeMark,\n        map: map,\n        animation: google.maps.Animation.BOUNCE,\n        title: 'Hello Negative!',\n        icon: icon5\n      })\n\n      positiveMark.addListener('click', function() {\n        let content = '<div id=\"content\" style=\"min-width:150px;\">'+\n                      '<p>Tags</p>'+\n                      '<button class=\"btn btn-primary btn-dark\">positive</button>'+\n                      '<button class=\"btn btn-primary btn-warning\">positive</button>'+\n                      '<button class=\"btn btn-primary\">positive</button>'+\n                      '</div>';\n        \n        infowindow.setContent(content)\n        infowindow.open(map, positiveMark)\n      })\n    },\n\n    // ========================== Show aurin data on map ====================================\n    mapAurin(type){\n      this.visible=true\n      let map = new google.maps.Map(document.getElementById('map_canvas'), {\n        zoom: 12,\n        center:  {lat: -37.7998, lng: 144.9460},\n        disableDefaultUI: true,\n        styles: mapStyle\n      })\n      google.maps.event.addListenerOnce(map, 'idle', () => {\n        this.visible=false\n      })\n      let colors = this.gradient('#ffffff','#ff9900',7)\n\n      map.data.loadGeoJson(this.vic_geo)\n      map.data.setStyle((feature) => {\n        let name = feature.getProperty('vic_lga__3')\n        let total = 0\n\n        if (Const.aurin[`${name}`]){\n          if (Const.aurin[`${name}`][`${type[0]}`][`${type[1]}`]){\n            total = Const.aurin[`${name}`][`${type[0]}`][`${type[1]}`]\n          }\n        }\n\n        let color = '#000000'\n        if (total > 1)\n          color = colors[0]\n        if (total > 1000)\n          color = colors[1]\n        if (total > 3000)\n          color = colors[2]\n        if (total > 5000)\n          color = colors[3]\n        if (total > 10000)\n          color = colors[4]\n        if (total > 15000)\n          color = colors[5]\n        if (total > 20000)\n          color = colors[6]  \n\n        return {\n          fillColor: color,\n          fillOpacity: 0.7,\n          strokeWeight: 1\n        }\n      })\n \n    },\n\n    // ========================== Build Map =================================================\n    mapBuild(scope){\n      let map = new google.maps.Map(document.getElementById('map_canvas'), {\n        zoom: 12,\n        center:  {lat: -37.7998, lng: 144.9460},\n        disableDefaultUI: true,\n        styles: mapStyle\n      })\n\n      let infowindow = new google.maps.InfoWindow()\n      let marker, i\n      let markers = []\n      let locations = []\n      let colors = this.gradient('#ffffff','#ff9900',7)\n     \n\n      this.barDataLabel.length=0\n      this.barData.length=0\n\n      // ======================== Setup each region/ Collect bar data ==========================\n      // set style for each region\n      map.data.loadGeoJson(this.melb_geo)\n      if (scope == 'melb') {\n        map.data.setStyle((feature) => {\n          let total = feature.getProperty('total')\n          let name = feature.getProperty('name')\n\n          if (!this.barDataLabel.includes(name)){\n            this.barDataLabel.push(name)\n            this.barData.push(total)\n          }\n          let color = '#000000'\n          if (total > 1)\n            color = colors[0]\n          if (total > 100)\n            color = colors[1]\n          if (total > 300)\n            color = colors[2]\n          if (total > 500)\n            color = colors[3]\n          if (total > 1000)\n            color = colors[4]\n          if (total > 1500)\n            color = colors[5]\n          if (total > 2000)\n            color = colors[6]  \n\n          return {\n            fillColor: color,\n            fillOpacity: 0.7,\n            strokeWeight: 1\n          }\n        })\n      } else {\n         map.data.setStyle((feature) => {\n          let total = feature.getProperty('total')\n          let name = feature.getProperty('name')\n\n          if (!this.barDataLabel.includes(name)){\n            this.barDataLabel.push(name)\n            this.barData.push(total)\n          }\n          let color = '#000000'\n          if (total > 1)\n            color = colors[0]\n          if (total > 1000)\n            color = colors[1]\n          if (total > 3000)\n            color = colors[2]\n          if (total > 5000)\n            color = colors[3]\n          if (total > 10000)\n            color = colors[4]\n          if (total > 15000)\n            color = colors[5]\n          if (total > 20000)\n            color = colors[6]  \n\n          return {\n            fillColor: color,\n            fillOpacity: 0.7,\n            strokeWeight: 1\n          }\n        })\n      }\n      // setup bar data\n      this.barDatacollection = {\n        labels: this.barDataLabel,\n        datasets: [\n          {\n            label: 'Total Sins',\n            backgroundColor: '#ff9900',\n            data: this.barData\n          }\n        ]\n      }\n\n      // mouse click event: show grid info\n      map.data.addListener('click', (event) => {\n        // prepare data\n        let name = event.feature.getProperty(\"name\")\n        let statistics = event.feature.getProperty(\"statistcs\")\n \n        let infoPieDataSentiment = [] \n        let infoPieNameSentiment = []\n        let infoPieData = []\n        let infoPieName = []\n        let temp = 'sentiment'\n\n        for (const [key, value] of Object.entries(statistics.sentiment)) {\n          infoPieNameSentiment.push(key)\n          infoPieDataSentiment.push(value)\n        }\n\n        for (const [key, value] of Object.entries(statistics)) {\n          if (key != temp){\n            for(const [inner_key, inner_value] of Object.entries(value)) {\n              infoPieName.push(inner_key)\n              infoPieData.push(inner_value)\n            }\n          }\n        }\n\n        // set all chart data here\n        let pieDatacollection_sentiment = {\n          labels: infoPieNameSentiment,\n          datasets: [\n            {\n              label: 'Sentiment',\n              backgroundColor: this.gradient('#F5F5F5','ff9900',infoPieDataSentiment.length) ,\n              data: infoPieDataSentiment\n            }\n          ]\n        }\n\n        let pieDatacollection = {\n          labels: infoPieName,\n          datasets: [\n            {\n              label: 'Sin',\n              backgroundColor: this.gradient('#F5F5F5','ff9900',infoPieData.length) ,\n              data: infoPieData\n            }\n          ]\n        }\n        \n        // init infowindow with customized view\n        let InfoWindow = Vue.extend(InfoWindowComponent)\n        \n        // send data to the view\n        let instance = new InfoWindow({\n          propsData: {\n            name,\n            pieDatacollection_sentiment,\n            pieDatacollection\n          }\n        })\n        \n        instance.$mount()\n\n        infowindow.setContent(instance.$el)\n        //infowindow.setPosition(event.feature.getGeometry().getAt(0).getAt(0).getAt(0))\n        infowindow.setPosition(event.latLng)\n        //infowindow.setOptions({pixelOffset: new google.maps.Size(0,0)})\n        infowindow.open(map)\n      })\n      \n      // mouse over event: highlight color\n      map.data.addListener('mouseover', (event) => {\n        map.data.overrideStyle(event.feature, {fillColor: 'black'})\n      })\n\n      // mouse our event: reset color/info-window\n      map.data.addListener('mouseout', (event) => {\n        map.data.revertStyle()\n        infowindow.close()\n      })\n    },\n\n    // ====================== Get Map Data ==================================================\n    mapBuildZone(zone, scope) {\n      this.visible = true\n      this.$ajax({\n        url: zone,\n        method: 'GET',\n      }).then(res => {\n          this.melb_geo = res.data.url,\n          this.visible = false,\n          console.log(this.melb_geo),\n          // re-render the map here\n          this.flash('success', 'success',{timeout: 3000}),\n          this.mapBuild(scope)\n        })\n        .catch(error => {\n          this.visible = false,\n          this.flash(`${error}`, 'error'),\n          this.errored = true\n      })    \n    },\n\n    // ====================== Get Machine Learning Data =====================================\n    chartBuildMachine() {\n      this.visilbe = true\n      this.$ajax({\n        url: '/api/statistics/machine/',\n        method: 'GET',\n      }).then(res => {\n        this.machineDatacollection_lust = {\n          labels: res.data.lust.key,\n          datasets: [\n            {\n              label: 'Lust',\n              backgroundColor: this.gradient('#ff9900','#ffffff', res.data.lust.key.length),\n              data: res.data.lust.value\n            }\n          ]\n        }\n        this.machineDatacollection_gluttony = {\n          labels: res.data.gluttony.key,\n          datasets: [\n            {\n              label: 'Gluttony',\n              backgroundColor: this.gradient('#ff9900','#ffffff', res.data.gluttony.key.length),\n              data: res.data.gluttony.value\n            }\n          ]\n        }\n        this.visible = false\n      })\n      .catch(error => {\n        this.visible = false,\n        this.flash(`${error}`, 'error'),\n        this.errored = true\n      }) \n    },\n\n    // ====================== Get NLP Learning Data =========================================\n    chartBuildText() {\n      this.visilbe = true\n      this.$ajax({\n        url: '/api/statistics/text/',\n        method: 'GET',\n      }).then(res => {\n        console.log(res)\n        this.textDatacollection = {\n          labels: res.data.text.key,\n          datasets: [\n            {\n              label: 'Text',\n              backgroundColor: this.gradient('#ff9900','#ffffff', res.data.text.key.length),\n              data: res.data.text.value\n            }\n          ]\n        }\n        this.sentimentDatacollection = {\n          labels: res.data.sentiment.key,\n          datasets: [\n            {\n              label: 'Sentiment',\n              backgroundColor: this.gradient('#F5F5F5','ff9900', res.data.sentiment.key.length),\n              data: res.data.sentiment.value\n            }\n          ]\n        }\n        this.visible = false\n      })\n      .catch(error => {\n        this.visible = false,\n        this.flash(`${error}`, 'error'),\n        this.errored = true\n      }) \n    },\n\n    // ====================== Track 1 User by ID ============================================\n    mapBuildTrack(){\n      this.visible = true\n      let map = new google.maps.Map(document.getElementById('map_canvas'), {\n        zoom: 13,\n        center:  {lat: -37.7998, lng: 144.9460},\n        disableDefaultUI: true,\n        styles: mapStyle\n      })\n\n      let infowindow = new google.maps.InfoWindow()\n      let path = []\n      let sDate = new Date(this.start_time)\n      let eDate = new Date(this.end_time)\n      let start_time = this.toISOLocal(sDate).replace(/T/g, \" \"),\n          end_time = this.toISOLocal(eDate).replace(/T/g, \" \")\n      let noData = false\n\n      if (start_time.includes('NaN') || end_time.includes('NaN'))\n        start_time = end_time = null\n        \n      let data = {\n        //start_time: '2016-01-09 10:00:00+1000',\n        //end_time: '2016-10-09 10:00:00+1000',\n        start_time,\n        end_time,\n        tags: this.tags,\n        threshold: 0.9\n      }\n        \n      console.log(data)\n\n      this.$ajax({\n        url: `/api/statistics/track/${this.user_id}/`,\n        method: 'POST',\n        data: data\n      }).then(res => {\n\n        console.log(res.data)\n        \n        if (Object.keys(res.data).length === 0)\n          this.flash('no data match current query', 'error')\n          noData = true\n\n        for (const [key, value] of Object.entries(res.data)) {\n          let point = {\n            lat: value[0].geo[1], \n            lng: value[0].geo[0]\n          }\n          \n          path.push(point)\n          let svg_icon = Const.svg_neutral\n\n          if (value[0].tags.sentiment){\n            if (value[0].tags.sentiment[0] == 'positive'){\n              svg_icon = Const.svg_positive\n            }\n            if (value[0].tags.sentiment[0] == 'negative'){\n              svg_icon = Const.svg_negative\n            }\n          }\n\n          let icon = {\n            path: svg_icon,\n            fillColor: '#ff9900',\n            fillOpacity: 1,\n            anchor: new google.maps.Point(250,250),\n            strokeWeight: 0, \n            scale: .1\n          }\n\n          let marker = new google.maps.Marker({\n            position: point,\n            map: map,\n            icon: icon,\n            title: value[0].time + value[0].text\n          })\n\n          let tag_content = ''\n        \n          for (const [mainTag, subTags] of Object.entries(value[0].tags)){\n            subTags.forEach(tag => {\n              tag_content = tag_content + `<button class=\"btn btn-primary btn-dark\">${tag}</button>`\n            })\n          }\n\n          if (value[0].img_id.length>0){\n            value[0].img_id.forEach(img => {\n              tag_content = tag_content + `<a class=\"btn btn-warning\" target=\"_blank\" href=\"http://172.26.37.225/api/tweet/pic/${img}\">IMAGE</a>`\n            })\n          }\n\n          let content = '<div id=\"content\" style=\"min-width:150px;\">'+\n            '<h4 class=\"font-weight-bold\">'+ key +'</h4>'+\n            tag_content+\n            '</div>'\n\n          marker.addListener('click', () => {     \n            infowindow.setContent(content)\n            infowindow.open(map, marker)\n          })\n\n          value.slice(1).forEach((track) => {\n            svg_icon = Const.svg_neutral\n            if (track.tags.sentiment){\n              if (track.tags.sentiment[0] == 'positive'){\n                svg_icon = Const.svg_positive\n              }\n              if (track.tags.sentiment[0] == 'negative'){\n                svg_icon = Const.svg_negative\n              }\n            }\n\n            let icon_sm= {\n              path: svg_icon,\n              fillColor: '#ff9900',\n              fillOpacity: 1,\n              anchor: new google.maps.Point(250,250),\n              strokeWeight: 0, \n              scale: .05\n            }\n\n            point = {\n              lat: track.geo[1], \n              lng: track.geo[0]\n            }\n\n            let marker = new google.maps.Marker({\n              position: point,\n              map: map,\n              icon: icon_sm,\n              title: track.time + track.text\n            })\n\n            tag_content = ''\n\n            for (const [mainTag, subTags] of Object.entries(track.tags)){\n              subTags.forEach(tag => {\n                tag_content = tag_content + `<button class=\"btn btn-primary btn-dark\">${tag}</button>`\n              })\n            }\n\n            if (track.img_id.length>0){\n              track.img_id.forEach(img => {\n                tag_content = tag_content + `<a class=\"btn btn-warning\" target=\"_blank\" href=\"http://172.26.37.225/api/tweet/pic/${img}\">IMAGE</a>`\n              })\n            }\n\n            let content = '<div id=\"content\" style=\"min-width:150px;\">'+\n              '<p class=\"font-weight-bold\">Tags</p>'+\n              tag_content+\n              '</div>'\n\n            marker.addListener('click', () => {\n              infowindow.setContent(content)\n              infowindow.open(map, marker)\n            })\n\n            path.push(point)\n          })\n        }\n      }).then(() => {\n        let trackPath = new google.maps.Polyline({\n          path: path,\n          geodesic: true,\n          strokeColor: '#ff9900',\n          strokeOpacity: 1.0,\n          strokeWeight: 2,\n        })\n        google.maps.event.addListener(trackPath, 'mouseover', () => {\n          trackPath.setOptions({strokeWeight: 4})\n        })\n        google.maps.event.addListener(trackPath, 'mouseout', () => {\n          trackPath.setOptions({strokeWeight: 2})\n        })\n        trackPath.setMap(map)\n        if (noData == false)\n          this.flash('tracking success', 'success',{timeout: 3000})\n          this.flash('tracking success', 'success',{timeout: 3000})\n        this.visible = false\n      }).catch(error => {\n        this.flash(`${error}`, 'error'),\n        this.visible = false\n        this.errored = true\n      })\n    },\n\n    // ====================== Track random n users ==========================================\n    mapBuildTrackN() {\n      this.visible = true\n      let map = new google.maps.Map(document.getElementById('map_canvas'), {\n        zoom: 13,\n        center:  {lat: -37.7998, lng: 144.9460},\n        disableDefaultUI: true,\n        styles: mapStyle\n      })\n\n      let infowindow = new google.maps.InfoWindow()\n      let paths = []\n      let colors = []\n      let sDate = new Date(this.start_time)\n      let eDate = new Date(this.end_time)\n      let noData = false\n      \n      let start_time = this.toISOLocal(sDate).replace(/T/g, \" \"),\n          end_time = this.toISOLocal(eDate).replace(/T/g, \" \")\n\n      if (start_time.includes('NaN') || end_time.includes('NaN'))\n        start_time = end_time = null\n        \n      let data = {\n        //start_time: '2016-01-09 10:00:00+1000',\n        //end_time: '2016-10-09 10:00:00+1000',\n        start_time,\n        end_time,\n        tags: this.tags,\n        skip: parseInt(this.skip),\n        threshold: 0.9,\n        single: 20  \n      }\n\n      console.log(data)\n      \n      this.$ajax({\n        url: `/api/statistics/track/random/${this.number}/`,\n        method: 'POST',\n        data: data\n      }).then(res => {\n        if (Object.keys(res.data).length === 0)\n          this.flash('no data match current query', 'error')\n          noData = true\n        \n        console.log(res.data)\n\n        for (const [key, value] of Object.entries(res.data)) {\n          let point = {\n            lat: value[0].geo[1], \n            lng: value[0].geo[0]\n          }\n          let color = this.getRandomColor()\n          let path = []\n          path.push(point)\n          colors.push(color)\n          let svg_icon = Const.svg_neutral\n\n          if (value[0].tags.sentiment){\n            if (value[0].tags.sentiment[0] == 'positive'){\n              svg_icon = Const.svg_positive\n            }\n            if (value[0].tags.sentiment[0] == 'negative'){\n              svg_icon = Const.svg_negative\n            }\n          }\n          \n          let icon = {\n            path: svg_icon,\n            fillColor: color,\n            fillOpacity: 1,\n            anchor: new google.maps.Point(250,250),\n            strokeWeight: 0, \n            scale: .1\n          }\n\n          let marker = new google.maps.Marker({\n            position: point,\n            map: map,\n            icon: icon,\n            title: value[0].time\n          })\n\n          let tag_content = ''\n\n          for (const [mainTag, subTags] of Object.entries(value[0].tags)){\n            subTags.forEach(tag => {\n              tag_content = tag_content + `<button class=\"btn btn-primary btn-dark\">${tag}</button>`\n            })\n          }\n\n          if (value[0].img_id.length>0){\n            value[0].img_id.forEach(img => {\n              tag_content = tag_content + `<a class=\"btn btn-warning\" target=\"_blank\" href=\"http://172.26.37.225/api/tweet/pic/${img}\">IMAGE</a>`\n            })\n          }\n\n          let content = '<div id=\"content\" style=\"min-width:150px;\">'+\n            '<h4 class=\"font-weight-bold\">'+ key +'</h4>'+\n            tag_content+\n            '</div>'\n\n          marker.addListener('click', () => {\n            infowindow.setContent(content)\n            infowindow.open(map, marker)\n          })\n\n          value.slice(1).forEach((track) => {\n            svg_icon = Const.svg_neutral\n            if (track.tags.sentiment){\n              if (track.tags.sentiment[0] == 'positive'){\n                svg_icon = Const.svg_positive\n              }\n              if (track.tags.sentiment[0] == 'negative'){\n                svg_icon = Const.svg_negative\n              }\n            }\n\n            let icon_sm= {\n              path: svg_icon,\n              fillColor: color,\n              fillOpacity: 1,\n              anchor: new google.maps.Point(250,250),\n              strokeWeight: 0, \n              scale: .05\n            }\n\n            point = {\n              lat: track.geo[1], \n              lng: track.geo[0]\n            }\n\n            let marker = new google.maps.Marker({\n              position: point,\n              map: map,\n              icon: icon_sm,\n              title: track.time\n            })\n\n            let tag_content = ''\n\n            for (const [mainTag, subTags] of Object.entries(track.tags)){\n              subTags.forEach(tag => {\n                tag_content = tag_content + `<button class=\"btn btn-primary btn-dark\">${tag}</button>`\n              })\n            }\n\n            if (track.img_id.length>0){\n              track.img_id.forEach(img => {\n                tag_content = tag_content + `<a class=\"btn btn-warning\" target=\"_blank\" href=\"http://172.26.37.225/api/tweet/pic/${img}\">IMAGE</a>`\n              })\n            }\n\n            let content = '<div id=\"content\" style=\"min-width:150px;\">'+\n              '<p class=\"font-weight-bold\">Tags</p>'+\n              tag_content+\n              '</div>'\n\n            marker.addListener('click', () => {\n              infowindow.setContent(content)\n              infowindow.open(map, marker)\n            })\n\n            path.push(point)\n          })\n          paths.push(path)\n        }\n      }).then(() => {\n        paths.forEach((path,j) => {\n          let trackPath = new google.maps.Polyline({\n            path: path,\n            geodesic: true,\n            strokeColor: colors[j],\n            strokeOpacity: 1.0,\n            strokeWeight: 2,\n          })\n          google.maps.event.addListener(trackPath, 'mouseover', () => {\n            trackPath.setOptions({strokeWeight: 4})\n          })\n          google.maps.event.addListener(trackPath, 'mouseout', () => {\n            trackPath.setOptions({strokeWeight: 2})\n          })\n          trackPath.setMap(map)\n        })\n        if (noData == false)\n          this.flash(`${paths.length} users found`, 'success',{timeout: 3000})\n          this.flash(`${paths.length} users found`, 'success',{timeout: 3000})\n        this.visible = false\n      }).catch(error => {\n        console.log(error)\n        this.flash(`${error}`, 'error'),\n        this.visible = false\n        this.errored = true\n      })\n    },\n\n    // ====================== Time formatter =================================================\n    toISOLocal(d) {\n      let z = n => (n<10? '0':'')+n;\n      let off = d.getTimezoneOffset();\n      let sign = off < 0? '+' : '-';\n      off = Math.abs(off);\n\n      return d.getFullYear() + '-' + z(d.getMonth()+1) + '-' +\n            z(d.getDate()) + 'T' + z(d.getHours()) + ':'  + z(d.getMinutes()) + \n            ':' + z(d.getSeconds()) + sign + z(off/60|0) + z(off%60); \n    },\n\n    // ====================== Color generators ===============================================\n    getRandomColor() {\n      const letters = '0123456789ABCDEF';\n      let color = '#';\n      for (let i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n      }\n      return color;\n    },\n\n    rgbToHex(r, g, b) {\n      var hex = ((r<<16) | (g<<8) | b).toString(16);\n      return \"#\" + new Array(Math.abs(hex.length-7)).join(\"0\") + hex;\n    },\n\n    hexToRgb(hex) {\n      var rgb = [];\n      for(var i=1; i<7; i+=2){\n        rgb.push(parseInt(\"0x\" + hex.slice(i,i+2)));\n      }\n      return rgb;\n    },\n\n    gradient (startColor,endColor,step) {\n      var sColor = this.hexToRgb(startColor),\n          eColor = this.hexToRgb(endColor);\n\n      var rStep = (eColor[0] - sColor[0]) / step,\n          gStep = (eColor[1] - sColor[1]) / step,\n          bStep = (eColor[2] - sColor[2]) / step;\n\n      var gradientColorArr = [];\n      for(var i=0;i<step;i++){\n          gradientColorArr.push(this.rgbToHex(parseInt(rStep*i+sColor[0]),parseInt(gStep*i+sColor[1]),parseInt(bStep*i+sColor[2])));\n      }\n      return gradientColorArr;\n    }\n  }\n}\n</script>\n\n\n<style>\n@import '~bootstrap/dist/css/bootstrap.css';\n@import '~bootstrap-vue/dist/bootstrap-vue.css';\n#header #logo {\n  background: url(\"../assets/images/logo_premium.png\") center;\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-color: transparent;\n  position: fixed;\n  width: 12em;\n  height: 6em;\n  top: 0;\n  left: 3em;\n}\n#gmap {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 0px;\n  background-color:#bbb;\n  position: relative;\n}\n#onmap {\n  background-color:#ff9900;\n  position: absolute; \n  top: 100px; \n  right: 20px; \n  z-index: 9999; \n  border-radius: 25px;\n  width: 320px;\n}\n#onmap2 {\n  background-color:#ff9900;\n  position: absolute; \n  top: 250px; \n  right: 20px; \n  z-index: 9998; \n  border-radius: 25px;\n  width: 320px;\n}\na.anchor {\n  display: block;\n  position: relative;\n  top: -6em;\n  visibility: hidden;\n}\n.line{\n  height: 1em;\n  border-bottom: 2px solid rgb(44, 44, 44);\n}\n.divider{\n  width:1em;\n  height:auto;\n  display:inline-block;\n}\n</style>"]}]}