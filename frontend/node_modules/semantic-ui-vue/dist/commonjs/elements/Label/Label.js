'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _babelHelperVueJsxMergeProps = require('babel-helper-vue-jsx-merge-props');

var _babelHelperVueJsxMergeProps2 = _interopRequireDefault(_babelHelperVueJsxMergeProps);

var _lib = require('../../lib');

var _PropTypes = require('../../lib/PropTypes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: 'SuiLabel',
  mixins: [_lib.SemanticUIVueMixin],
  props: {
    attached: (0, _PropTypes.Enum)(['top', 'bottom', 'top right', 'top left', 'bottom left', 'bottom right'], {
      description: 'A label can attach to a content segment.'
    }),
    basic: {
      type: Boolean,
      description: 'A label can reduce its complexity.'
    },
    circular: {
      type: Boolean,
      description: 'A label can be circular.'
    },
    color: _PropTypes.Enum.Color(),
    corner: (0, _PropTypes.Enum)(['left', 'right'], {
      description: 'A label can position itself in the corner of an element.'
    }),
    empty: {
      type: Boolean,
      description: 'Formats the label as a dot.'
    },
    floating: {
      type: Boolean,
      description: 'Float above another element in the upper right corner.'
    },
    image: Boolean,
    pointing: (0, _PropTypes.Enum)(['left', 'right', 'above', 'below'], {
      description: 'A label can point to content next to it.',
      type: Boolean
    }),
    icon: String,
    ribbon: (0, _PropTypes.Enum)(['left', 'right'], {
      description: 'A label can appear as a ribbon attaching itself to an element.',
      type: Boolean
    }),
    size: _PropTypes.Enum.Size({
      description: 'A label can have different sizes.'
    }),
    tag: _PropTypes.Enum.Color({
      description: 'A label can appear as a tag.',
      type: Boolean
    })
  },
  computed: {
    pointingClass: function pointingClass() {
      if (!this.pointing) {
        return '';
      }

      var className = '';
      if (['left', 'right'].includes(this.pointing)) className += this.pointing + ' ';
      className += 'pointing';
      if (['above', 'below'].includes(this.pointing)) className += ' ' + this.pointing;
      return className;
    }
  },
  render: function render() {
    var h = arguments[0];

    var ElementType = this.getElementType();

    return h(
      ElementType,
      (0, _babelHelperVueJsxMergeProps2.default)([this.getChildPropsAndListeners(), {
        'class': this.classes('ui', this.pointingClass, this.color, this.size, this.circular && 'circular', this.empty && 'empty', this.floating && 'floating', this.basic && 'basic', this.image && 'image', this.attached && this.attached + ' attached', this.ribbon && this.ribbon + ' ribbon', this.corner && this.corner + ' corner', this.tag && this.tag + ' tag', 'label')
      }]),
      [this.icon && h(
        'sui-icon',
        {
          attrs: { name: this.icon }
        },
        []
      ), this.$slots.default]
    );
  }
};